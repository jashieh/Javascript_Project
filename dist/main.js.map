{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/bullet.js","webpack:///./lib/camera.js","webpack:///./lib/game.js","webpack:///./lib/game_view.js","webpack:///./lib/index.js","webpack:///./lib/light.js","webpack:///./lib/moving_object.js","webpack:///./lib/player.js","webpack:///./lib/portal.js","webpack:///./lib/portal_gun.js","webpack:///./lib/rectangle.js","webpack:///./lib/static_object.js","webpack:///./lib/util.js","webpack:///./lib/wall.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAA2C;AACjB;;AAE1B,qBAAqB,sDAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C,6CAAI;AAC/C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEe,qEAAM,E;;;;;;;;;;;;AChErB;AAAA;AAAoC;;AAEpC;AACA;AACA;;AAEA;AACA;;AAEA,sB;AACA,sB;;AAEA;AACA;;AAEA;;AAEA;AACA,4BAA4B,kDAAS;AACrC;AACA,yBAAyB,kDAAS;AAClC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEe,qEAAM,E;;;;;;;;;;;;ACtErB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;AACA;AACJ;AACI;AACO;AACT;AACO;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA,yBAAyB,+CAAM;AAC/B;AACA,KAAK,4BAA4B,+CAAM;AACvC;AACA,KAAK,4BAA4B,6CAAI;AACrC;AACA,KAAK,4BAA4B,+CAAM;AACvC;AACA,KAAK,4BAA4B,8CAAK;AACtC;AACA;AACA;;AAEA;AACA,0BAA0B,+CAAM;AAChC;AACA,KAAK,4BAA4B,+CAAM;AACvC;AACA,KAAK,4BAA4B,8CAAK;AACtC;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,uBAAuB,+CAAM;AAC7B;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA,mBAAmB,6CAAI;AACvB;AACA;AACA;AACA;AACA,KAAK;;AAEL,oBAAoB,6CAAI;AACxB;AACA;AACA;AACA;AACA,KAAK;;AAEL,oBAAoB,6CAAI;AACxB;AACA;AACA;AACA;AACA,KAAK;AACL,oBAAoB,6CAAI;AACxB;AACA;AACA;AACA;AACA,KAAK;AACL,oBAAoB,6CAAI;AACxB;AACA;AACA;AACA;AACA,KAAK;;AAEL,oBAAoB,6CAAI;AACxB;AACA;AACA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,+CAAM;AAC3B;AACA;AACA;AACA;AACA,KAAK;;AAEL,sBAAsB,+CAAM;AAC5B;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,6BAA6B,+CAAM;AACnC;AACA,KAAK;;AAEL;AACA;AACA,QAAQ;AACR;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,yBAAyB;AAC9C;AACA;AACA,U;AACA;AACA;AACA,U;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB,uBAAuB;AACzC;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,uDAAuD,cAAc;AACrE,wDAAwD,cAAc;;AAEtE,qCAAqC,oBAAoB,YAAY,E;AACrE,sCAAsC,oBAAoB,YAAY;;AAEtE;AACA;AACA;;AAEA;AACA,kBAAkB,uBAAuB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,O;AACA;AACA;;AAEA;AACA,kBAAkB,yBAAyB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,O;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,uBAAuB;AACzC,oBAAoB,uBAAuB;AAC3C;AACA;AACA;;AAEA,2BAA2B,+CAAM,oBAAoB,+CAAM;AAC3D,+BAA+B,mDAAS;;AAExC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,+CAAM,oBAAoB,+CAAM;AAC7D,iCAAiC,mDAAS;AAC1C;AACA;AACA;AACA;AACA,W;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEe,mEAAI,E;;;;;;;;;;;;AC1UnB;AAAA;AAAA;AAAA;AAA8B;AACA;AACJ;;AAE1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,YAAY,QAAQ,QAAQ;AAC5B;AACA;AACA;AACA,KAAK;;AAEL;AACA,8B;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL,oB;AACA;AACA,yC;AACA,KAAK;;;AAGL,oB;AACA;AACA,+B;AACA,KAAK;;AAEL,oB;AACA;AACA,iC;AACA;AACA,KAAK;;;AAGL;;AAEA,YAAY,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,O;AACA;;AAEA;AACA;AACA,oCAAoC,+CAAM;AAC1C;AACA;AACA,KAAK;AACL;AACA,oCAAoC,+CAAM;AAC1C;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;AAGe,uEAAQ,E;;;;;;;;;;;;AC7IvB;AAAA;AAAA;AAA0B;AACS;;;AAGnC;AACA;AACA;AACA;;AAEA,mBAAmB,6CAAI;AACvB,oBAAoB,6CAAI;AACxB;;AAEA;AACA;AACA,mBAAmB,6CAAI;;AAEvB;;AAEA,MAAM,kDAAQ;;AAEd,CAAC;;;;;;;;;;;;;;;ACrBD;AAAA;AAAA;AAA2C;AACjB;;;AAG1B,oBAAoB,sDAAY;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,K;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;;AAEA;AACA,2CAA2C,6CAAI;AAC/C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,K;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEe,oEAAK,E;;;;;;;;;;;;AC7KpB;AAAA;AAAA;AAAA;AAA0B;AACA;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C,6CAAI;AAC/C;AACA;AACA;;AAEA;AACA;;AAEA;AACA,uBAAuB,4CAAI;AAC3B;AACA;;;AAGA;AACA;AACA;AACA;;AAEe,2EAAY,E;;;;;;;;;;;;AC1C3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACb;AACO;AACP;AACF;AACF;AACA;;AAE1B;AACA;;AAEA,qBAAqB,sDAAY;AACjC;AACA;AACA;AACA;AACA;AACA;;AAEA,sC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,eAAe,4CAAI;AACnB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,iBAAiB,4CAAI;AACrB;AACA;;AAEA;AACA;AACA;AACA;;;AAGA,iBAAiB,+CAAM;AACvB,iBAAiB,+CAAM;;AAEvB;AACA,yBAAyB,+CAAM;AAC/B;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,2BAA2B,aAAa;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA,KAAK;AACL,4BAA4B,mDAAS;AACrC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA,4BAA4B,+CAAM;AAClC,4BAA4B,+CAAM;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,4CAAI;AAC3B;AACA;AACA;;AAEA;AACA,kBAAkB,KAAK,8CAAK,mBAAmB;AAC/C,mBAAmB,8CAAK;AACxB,mBAAmB,8CAAK;AACxB,mBAAmB,8CAAK;;AAExB,sBAAsB,8CAAK;AAC3B;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL;;AAEA;AACA,0CAA0C,6CAAI;AAC9C,0CAA0C,6CAAI;AAC9C;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGe,qEAAM,E;;;;;;;;;;;;ACtVrB;AAAA;AAAA;AAAA;AAAA;AAA2C;AACb;AACA;AACF;;;AAG5B,qBAAqB,sDAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,6DAA6D,+CAAM;AACnE;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK,gDAAgD,+CAAM,sBAAsB,8CAAK;AACtF;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,qEAAM,E;;;;;;;;;;;;AClQrB;AAAA;AAAA;AAAA;AAA8B;AACA;AACJ;;;AAG1B,wBAAwB,+CAAM;AAC9B;AACA;AACA;;AAEA;AACA;;AAEA;AACA,2CAA2C,6CAAI;AAC/C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA,cAAc,+CAAM;AACpB;AACA,cAAc,+CAAM;;;AAGpB;AACA;AACA,mBAAmB,+CAAM;AACzB;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,KAAK;;AAEL;AACA,mBAAmB,+CAAM;AACzB;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA,KAAK;AACL;AACA,mBAAmB,+CAAM;AACzB;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA,KAAK;AACL;AACA,mBAAmB,+CAAM;AACzB;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGe,wEAAS,E;;;;;;;;;;;;AC5FxB;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEe,wEAAS,E;;;;;;;;;;;;AC7BxB;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;;AAIA,C;;AAEe,2EAAY,E;;;;;;;;;;;AC1B3B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACpCA;AAAA;AAA2C;;AAE3C,mBAAmB,sDAAY;AAC/B;AACA;AACA;AACA;;;AAGA,C;;AAEe,mEAAI,E","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./lib/index.js\");\n","import MovingObject from './moving_object';\nimport Game from './game';\n\nclass Bullet extends MovingObject {\n  constructor(options) {\n    options.radius = Bullet.RADIUS;\n    super(options);\n    this.bounceCount = 0;\n    this.color = \"#66ff00\";\n    this.type = \"\";\n  }\n\n  bounce(direction) {\n    if(direction === \"horizontal\") {\n      this.vel[1] *= -1;\n    } else if (direction === \"vertical\") {\n      this.vel[0] *= -1;\n    } else {\n      this.vel[0] *= -1;\n      this.vel[1] *= -1;\n    }\n    this.bounceCount++;\n    if(this.bounceCount > Bullet.LIFESPAN) {\n      this.remove();\n    }\n  }\n\n  move(timeDelta) {\n    const NORMAL_FRAME_TIME_DELTA = 1000 / Game.FPS,\n      velocityScale = timeDelta / NORMAL_FRAME_TIME_DELTA,\n      offsetX = this.vel[0] * velocityScale,\n      offsetY = this.vel[1] * velocityScale;\n\n    const newX = this.pos[0] + offsetX;\n    const newY = this.pos[1] + offsetY;\n\n    const collisionX = this.game.wallCollision([this.pos[0], newY]);\n    const collisionY = this.game.wallCollision([newX, this.pos[1]]);\n    const collisionXY = this.game.wallCollision([newX, newY]);\n\n\n    if(this.game.portalCollision([this.pos[0], newY]))\n      return this.game.portalCollision([this.pos[0], newY]).teleport(this, [this.pos[0], newY]);\n    else if(this.game.portalCollision([newX, this.pos[1]]))\n      return this.game.portalCollision([newX, this.pos[1]]).teleport(this, [newX, this.pos[1]]);\n\n    if(collisionX) {\n      this.bounce(\"horizontal\");\n    } else if (collisionY) {\n\n      this.bounce(\"vertical\");\n    } else if (collisionXY) {\n      this.bounce(\"both\");\n    }\n\n    this.pos = [this.pos[0] + (this.vel[0] * velocityScale), \n      this.pos[1] + (this.vel[1] * velocityScale)];\n  }\n}\n\nBullet.RADIUS = 3;\nBullet.SPEED = 10;\nBullet.LIFESPAN = 5;\n\nexport default Bullet;","import Rectangle from './rectangle';\n\nclass Camera {\n  constructor(xView, yView, viewportWidth, \n    viewportHeight, worldWidth, worldHeight) {\n    \n    this.xView = xView || 0;\n\t  this.yView = yView || 0;\n\n\t  this.xDeadZone = 0; \n\t  this.yDeadZone = 0; \n\n\t  this.wView = viewportWidth;\n\t  this.hView = viewportHeight;\n\n\t  this.axis = AXIS.BOTH;\n\n    this.followed = null;\n    this.viewportRect = new Rectangle(this.xView, this.yView, \n      this.wView, this.hView);\n    this.worldRect = new Rectangle(0, 0, worldWidth, worldHeight);\n  }\n\n  follow(gameObject, xDeadZone, yDeadZone) {\n    this.followed = gameObject;\n    this.xDeadZone = xDeadZone;\n    this.yDeadZone = yDeadZone;\n  }\n\n  update() {\n    if (this.followed != null) {\n      if (this.axis == AXIS.HORIZONTAL || this.axis == AXIS.BOTH) {\n        if (this.followed.pos[0] - this.xView + this.xDeadZone > this.wView)\n          this.xView = this.followed.pos[0] - (this.wView - this.xDeadZone);\n        else if (this.followed.pos[0] - this.xDeadZone < this.xView)\n          this.xView = this.followed.pos[0] - this.xDeadZone;\n\n      }\n      if (this.axis == AXIS.VERTICAL || this.axis == AXIS.BOTH) {\n        if (this.followed.pos[1] - this.yView + this.yDeadZone > this.hView)\n          this.yView = this.followed.pos[1] - (this.hView - this.yDeadZone);\n        else if (this.followed.pos[1] - this.yDeadZone < this.yView)\n          this.yView = this.followed.pos[1] - this.yDeadZone;\n      }\n\n    }\n\n    this.viewportRect.set(this.xView, this.yView);\n\n    if (!this.viewportRect.within(this.worldRect)) {\n      if (this.viewportRect.left < this.worldRect.left)\n        this.xView = this.worldRect.left;\n      if (this.viewportRect.top < this.worldRect.top)\n        this.yView = this.worldRect.top;\n      if (this.viewportRect.right > this.worldRect.right)\n        this.xView = this.worldRect.right - this.wView;\n      if (this.viewportRect.bottom > this.worldRect.bottom)\n        this.yView = this.worldRect.bottom - this.hView;\n    }\n  }\n\n}\n\nconst AXIS = {\n  NONE: 1,\n  HORIZONTAL: 2,\n  VERTICAL: 3,\n  BOTH: 4 \n};\n\nexport default Camera;","import Player from './player';\nimport Bullet from './bullet';\nimport Wall from './wall';\nimport Portal from './portal';\nimport PortalGun from './portal_gun';\nimport Light from './light';\nimport GameView from './game_view';\n\nclass Game {\n  constructor() {\n    this.players = [];\n    this.bullets = [];\n    this.lights = [];\n    this.walls = [];\n    this.portals = [];\n\n    this.addWall();\n  }\n  \n\n  add(object) {\n    if(object instanceof Player) {\n      this.players.push(object);\n    } else if (object instanceof Bullet) {\n      this.bullets.push(object);\n    } else if (object instanceof Wall) {\n      this.walls.push(object);\n    } else if (object instanceof Portal) {\n      this.portals.push(object);\n    } else if (object instanceof Light) {\n      this.lights.push(object);\n    }\n  }\n\n  remove(object) {\n    if (object instanceof Bullet) {\n      this.bullets.splice(this.bullets.indexOf(object), 1);\n    } else if (object instanceof Portal) {\n      this.portals.splice(this.portals.indexOf(object), 1);\n    } else if (object instanceof Light) {\n      this.lights.splice(this.lights.indexOf(object), 1);\n    } else {\n      throw new Error(\"unknown type of object\");\n    }\n  }\n\n  addPlayer() {\n    const player = new Player({\n      game: this,\n      pos: [400,400]\n    });\n\n    this.add(player);\n    return player;\n  }\n\n  addWall() {\n    let wall = new Wall({\n      topLeft: [0,0],\n      bottomRight: [100,100],\n      direction: \"vertical\",\n      game: this\n    });\n\n    let wall2 = new Wall({\n      topLeft: [100,100],\n      bottomRight: [300,300],\n      direction: \"vertical\",\n      game: this\n    });\n\n    let wall3 = new Wall({\n      topLeft: [0,0],\n      bottomRight: [1000,30],\n      direction: \"vertical\",\n      game: this\n    });\n    let wall4 = new Wall({\n      topLeft: [0,0],\n      bottomRight: [30,600],\n      direction: \"vertical\",\n      game: this\n    });\n    let wall5 = new Wall({\n      topLeft: [0,570],\n      bottomRight: [1000,600],\n      direction: \"vertical\",\n      game: this\n    });\n\n    let wall6 = new Wall({\n      topLeft: [970,0],\n      bottomRight: [1000,600],\n      direction: \"vertical\",\n      game: this\n    });\n\n\n    this.add(wall);\n    this.add(wall2);\n    this.add(wall3);\n    this.add(wall4);\n    this.add(wall5);\n    this.add(wall6);\n\n    let portal = new Portal({\n      pos: [275, 300],\n      direction: \"horizontal\",\n      game: this,\n      dir: \"down\"\n    });\n\n    let portal2 = new Portal({\n      pos: [125, 100],\n      direction: \"horizontal\",\n      game: this,\n      dir: \"up\"\n    });\n    \n    portal2.connect(portal);\n    portal.connect(portal2);\n\n    this.add(portal);\n    this.add(portal2);\n\n  }\n\n  allMovingObjects() {\n    return [].concat(this.players, this.bullets, this.lights);\n  }\n\n  allObjects() {\n    return [].concat(this.bullets, this.walls, this.portals, this.lights);\n  }\n\n  draw(ctx, xView, yView) {\n    ctx.save();\n\n\n    if(this.players[0].portals.length === 2\n      && !this.players[0].portals[0].connectedTo\n      && !this.players[0].portals[1].connectedTo) {\n      this.players[0].connectPortals();\n    } else if(this.players[0].portals.length > 2) {\n      this.players[0].removePortals();\n    }\n        \n  \n    this.wallCollision(this.players[0].pos);\n    ctx.clearRect(0, 0, Game.DIM_X, Game.DIM_Y);\n    \n    ctx.fillRect(0, 0, xView, yView);\n\n    ctx.translate((xView/2 - this.players[0].pos[0]), (yView/2 - this.players[0].pos[1]))\n    // ctx.clearRect(0, 0, xView, yView);\n\n    ctx.fillStyle = Game.BG_COLOR;\n    \n    // ctx.fillRect(0, 0, Game.DIM_X, Game.DIM_Y);\n\n    // ctx.translate(-this.players[0].pos[0],-this.players[0].pos[1])\n    // ctx.restore();\n\n    \n    this.players[0].renderMouse(ctx);\n\n    this.allObjects().forEach(object => {\n      object.draw(ctx);\n    });\n\n    this.players[0].draw(ctx);\n\n    if(this.players[0].shielding) {\n      this.players[0].drawShield(ctx);\n    }\n\n    // ctx.rotate(-0.7)\n    \n    ctx.restore();\n\n  }\n\n  moveObjects(delta) {\n    this.allMovingObjects().forEach(object => {\n      if(!(object instanceof Player))\n        object.move(delta);\n    });\n\n    // this.lights.forEach(object => {\n    //   object.move(delta);\n    // });\n  }\n\n  step(delta) {\n    if(!this.players[0].timeStop) {\n      this.moveObjects(delta);\n    }\n    this.checkCollissions();\n  }\n\n  checkBounds(pos) {\n    return (pos[0] < 0) || (pos[1] < 0) ||\n    (pos[0] > Game.DIM_X) || (pos[1] > Game.DIM_Y);\n  }\n\n  checkBounce() {\n    // for(let i = 0; i < this.bullets.length; i++) {\n    //   if(this.bullets[i].pos[0] < 0 || this.bullets[i].pos[0] > Game.DIM_X) {\n    //     this.bullets[i].bounce(\"vertical\");\n    //   } \n    //   else if(this.bullets[i].pos[1] < 0 || this.bullets[i].pos[1] > Game.DIM_Y) {\n    //     this.bullets[i].bounce(\"horizontal\");\n    //   } \n\n    //   if(this.bullets[i].bounceCount > Bullet.LIFESPAN) {\n    //     this.bullets[i].remove();\n    //   }\n    // }\n  }\n\n  wallCollissionCircle(player) {\n    for(let i = 0; i < this.walls.length; i++) {\n      let wall = this.walls[i];\n\n      let midpointX = (wall.topLeft[0] + wall.bottomRight[0])/2;\n      let midpointY = (wall.topLeft[1] + wall.bottomRight[1])/2;\n\n      let width =  wall.bottomRight[0] - wall.topLeft[0];\n      let height = wall.bottomRight[1] - wall.topLeft[1];\n      \n      let circleDistX = Math.abs(player.pos[0] - midpointX);\n      let circleDistY = Math.abs(player.pos[1] - midpointY);\n\n      // if (circleDistX > (width/2 + player.radius)) { return false; }\n      // if (circleDistY > (height/2 + player.radius)) { return false; }\n\n      if (circleDistX <= (width/2)) { console.log(\"hit\");return true; } \n      if (circleDistY <= (height/2)) { console.log(\"hit\");return true; }\n\n    }\n    return false;\n  }\n\n  wallCollision(pos) {\n    for(let i = 0; i < this.walls.length; i++) {\n      let wall = this.walls[i];\n      if( !((pos[0] < wall.topLeft[0]) \n        || (pos[0] > wall.bottomRight[0])\n        || (pos[1] < wall.topLeft[1])\n        || (pos[1] > wall.bottomRight[1]))) {\n          return true;\n      } \n    }\n  }\n\n  portalCollision(pos) {\n    for(let i = 0; i < this.portals.length; i++) {\n      let portal = this.portals[i];\n      if( !((pos[0] < portal.topLeft[0]) \n        || (pos[0] > portal.bottomRight[0])\n        || (pos[1] < portal.topLeft[1])\n        || (pos[1] > portal.bottomRight[1]))) {\n          return portal;\n      } \n    }\n    return false;\n  }\n\n  checkCollissions() {\n    const allObjects = this.allMovingObjects();\n    for(let i = 0; i < allObjects.length; i++) {\n      for(let j = 0; j < allObjects.length; j++) {\n        if(i === j) continue;\n        const obj1 = allObjects[i];\n        const obj2 = allObjects[j];\n\n        if(obj1 instanceof Player && obj2 instanceof Bullet\n          && !(obj2 instanceof PortalGun)) {\n\n          if(obj1.shielding && obj1.shieldHealth > 0 && obj1.checkShieldHit(obj2)) {\n            obj1.shieldHealth--;\n            this.remove(obj2);\n            console.log(\"shield\");\n          }\n        }\n\n        if (obj1.isCollidedWith(obj2)) {\n\n          // if(obj1 instanceof Bullet && !(obj2 instanceof Bullet)) {\n          //   this.remove(obj1);\n          // }\n          // if(obj2 instanceof Bullet && !(obj1 instanceof Bullet)) {\n          //   this.remove(obj2);\n          // }\n          if(obj1 instanceof Player && obj2 instanceof Bullet\n            && !(obj2 instanceof PortalGun)) {\n            obj1.health--;\n            this.remove(obj2);\n            console.log(obj1.health);\n            console.log(\"hit\")\n          } \n          // else if (obj2 instanceof Player && obj1 instanceof Bullet) {\n          //   obj1.health--;\n          //   this.remove(obj1);\n\n          //   console.log(obj2.health);\n\n          //   console.log(\"hit\")\n          // }\n          // const collision = obj1.collideWith(obj2);\n          // if (collision) return;\n          \n        }\n      }\n    }\n  }\n\n}\n\nGame.BG_COLOR = \"#000000\";\n// Game.DIM_X = 1000;\n// Game.DIM_Y = 600;\nGame.DIM_X = 5000;\nGame.DIM_Y = 5000;\n\nGame.VIEW_X = 1000;\nGame.VIEW_Y = 600;\n\nGame.FPS = 32;\n\nexport default Game;","import Player from \"./player\";\nimport Camera from \"./camera\";\nimport Game from \"./game\";\n\nclass GameView {\n  constructor(game, ctx) {\n    this.ctx = ctx;\n    this.game = game;\n    this.player = this.game.addPlayer();\n\n    const vWidth = 1000;\n    const vHeight = 600;\n      // this.camera = new Camera(0, 0, vWidth, vHeight, 5000, 5000);\n\n      // this.camera.follow(this.player, vWidth / 2, vHeight / 2);\n\n    this.keyUp = this.keyUp.bind(this);\n  }\n  \n  // w = 87; d = 68; a = 65; s = 83;\n  bindKeyHandlers() {\n    window.addEventListener(\"keydown\", (e) => {\n      keys[e.keyCode] = true;\n    });\n\n    window.addEventListener(\"keyup\", (e) => {\n      keys[e.keyCode] = false; \n    });\n\n\n    document.addEventListener(\"mousedown\",() => {\n      if(this.player.shieldHealth < 0.01 || !this.player.shielding && \n        !this.player.reloading) {\n        this.player.fireBullet(\"bullet\");\n      }\n    });\n\n    key(\"e\", () => { \n      if(!this.player.portalCooldown)\n        this.player.fireBullet(\"portal\"); \n    });\n\n\n    key(\"r\", () => { \n      if(!this.player.timeStopCooldown)\n        this.player.stopTime(); \n    });\n\n    key(\"f\", () => { \n      if(!this.player.lightCooldown) {\n        this.player.shineLight(); \n      }\n    });\n\n\n  }\n\n  // w = 87; d = 68; a = 65; s = 83; q = 81; e = 69; space = 32\n  keyPressed() {\n    // console.log(keys);\n    this.player.moving = false;\n    if(this.player.shieldHealth < 0.01 || !this.player.shielding) {\n      if (keys[87] && keys[65]) {\n        this.player.move(\"wa\");\n        this.player.moving = true;\n      } else if (keys[87] && keys[68]) {\n        this.player.move(\"wd\");\n        this.player.moving = true;\n      } else if (keys[83] && keys[65]) {\n        this.player.move(\"sa\");\n        this.player.moving = true;\n      } else if (keys[83] && keys[68]) {\n        this.player.move(\"sd\");\n        this.player.moving = true;\n      } else if(keys[87]) {\n        this.player.move(\"w\");\n        this.player.moving = true;\n      } else if (keys[65]) {\n        this.player.move(\"a\");\n        this.player.moving = true;\n      } else if (keys[83]) {\n        this.player.move(\"s\");\n        this.player.moving = true;\n      } else if (keys[68]) {\n        this.player.move(\"d\");\n        this.player.moving = true;\n      } \n    }\n\n    if(keys[32]) {\n      this.player.shielding = true;\n      if(this.player.shieldHealth > Player.MIN_SHIELD) {\n        this.player.shieldHealth -= 0.02;\n      }\n    } else {\n      this.player.shielding = false;\n      if(this.player.shieldHealth < Player.MAX_SHIELD) {\n        this.player.shieldHealth += 0.01;\n      }\n    }\n  }\n\n\n  keyUp(e) {\n    if(e.key === \"w\" || e.key === \"s\" ) \n      this.player.vel[1] = 0;\n    if (e.key === \"a\" || e.key === \"d\")\n      this.player.vel[0] = 0;\n  }\n\n  start() {\n    this.bindKeyHandlers();\n    this.lastTime = 0;\n\n    // start the animation\n    requestAnimationFrame(this.animate.bind(this));\n  }\n\n  animate(time) {\n    const timeDelta = time - this.lastTime;\n    this.keyPressed();\n    this.game.step(timeDelta);\n\n    // this.camera.update();\n    \n    this.game.draw(this.ctx, 1000, 600);\n    this.lastTime = time;\n\n    // every call to animate requests causes another call to animate\n    requestAnimationFrame(this.animate.bind(this));\n  }\n}\n\n// const accel = 3;\n// const sideMove = Math.sqrt(accel+accel)/2;\n\nconst keys = {};\n\nwindow.keys = keys;\n\n\nexport default GameView;","import Game from './game';\nimport GameView from './game_view';\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const canvasEl = document.getElementById(\"game-canvas\");\n  // canvasEl.width = Game.DIM_X;\n  // canvasEl.height = Game.DIM_Y;\n\n  canvasEl.width = Game.VIEW_X;\n  canvasEl.height = Game.VIEW_Y;\n  const ctx = canvasEl.getContext(\"2d\");\n\n  window.canvas = canvasEl;\n  window.rect = canvasEl.getBoundingClientRect();\n  const game = new Game();\n\n  window.game = game;\n\n  new GameView(game, ctx).start();\n\n});\n\n\n","import MovingObject from './moving_object';\nimport Game from './game';\n\n\nclass Light extends MovingObject {\n  constructor(options) {\n    options.radius = 1;\n    super(options);\n    this.color = \"#ffffff\";\n    this.trail = [this.pos];\n\n    this.maxLength = Light.MAX;\n    this.i = 0;\n    this.lifespan = options.lifespan || Math.floor(Math.random()*40);\n  }\n\n  drawTail() {\n\n  }\n  \n  draw(ctx) {\n    if(this.trail.length === 0) return;\n\n    const gradient = ctx.createLinearGradient(\n      this.pos[0], this.pos[1],\n      this.trail[0][0], this.trail[0][1]\n    );\n\n    if(this.lifespan > Light.HALF_LIFE) {\n      gradient.addColorStop(0, \"#aaa\");\n    } \n    else if(this.lifespan > Light.HALF_LIFE * (3/2)) {\n      gradient.addColorStop(0, \"#7f7f7f\");\n    }\n    else {\n      gradient.addColorStop(0, \"#fff\");\n    }\n\n    gradient.addColorStop(1,  \"#222\");\n\n    \n    ctx.lineWidth = this.radius;\n    ctx.strokeStyle = gradient;\n    ctx.setLineDash([1, 0]);\n    \n    ctx.beginPath();\n    ctx.moveTo(this.pos[0], this.pos[1]);\n    ctx.lineTo(this.trail[0][0], this.trail[0][1]);\n    ctx.stroke();\n    \n    // ctx.fillStyle = this.color;\n    // ctx.arc(\n    //   this.pos[0], this.pos[1], this.radius, 0, 2 * Math.PI, true\n    // );\n    // ctx.fill();\n  }\n\n  bounce(direction) {\n    if(direction === \"horizontal\") {\n      this.vel[1] *= -1;\n    } else if (direction === \"vertical\") {\n      this.vel[0] *= -1;\n    } else {\n      this.vel[0] *= -1;\n      this.vel[1] *= -1;\n    }\n    \n    // if(this.bounceCount > Light.LIFESPAN) {\n    //   this.remove();\n    // }\n    // this.bounceCount++;\n\n    const reflection = new Light({\n      pos: this.pos,\n      vel: this.vel,\n      game: this.game,\n      lifespan: this.lifespan\n    });\n\n    this.game.add(reflection);\n    this.vel = [0, 0];\n\n  }\n\n  move(timeDelta) {\n    const NORMAL_FRAME_TIME_DELTA = 1000 / Game.FPS,\n      velocityScale = timeDelta / NORMAL_FRAME_TIME_DELTA,\n      offsetX = this.vel[0] * velocityScale,\n      offsetY = this.vel[1] * velocityScale;\n\n    const newX = this.pos[0] + offsetX;\n    const newY = this.pos[1] + offsetY;\n\n    const collisionX = this.game.wallCollision([this.pos[0], newY]);\n    const collisionY = this.game.wallCollision([newX, this.pos[1]]);\n    const collisionXY = this.game.wallCollision([newX, newY]);\n\n\n    // if(this.game.portalCollision([this.pos[0], newY]))\n    //   return this.game.portalCollision([this.pos[0], newY]).teleport(this, [this.pos[0], newY]);\n    // else if(this.game.portalCollision([newX, this.pos[1]]))\n    //   return this.game.portalCollision([newX, this.pos[1]]).teleport(this, [newX, this.pos[1]]);\n\n    if(collisionX) {\n      this.bounce(\"horizontal\");\n    } else if (collisionY) {\n      this.bounce(\"vertical\");\n    } else if (collisionXY) {\n      this.bounce(\"both\");\n    }\n\n    this.lifespan++;\n\n    if(this.lifespan > Light.LIFESPAN) {\n      this.remove();\n    }\n\n    this.pos = [this.pos[0] + (this.vel[0] * velocityScale), \n    this.pos[1] + (this.vel[1] * velocityScale)];\n    \n    this.trail.push(this.pos);\n\n    if(this.trail.length > Light.MAX) {\n        this.trail.shift();\n    }\n\n    if(this.lifespan > Light.HALF_LIFE) {\n      this.trail.shift();\n      this.trail.shift();\n    }  \n  }\n}\n\nconst cos15 = Math.cos((15/180) * Math.PI);\nconst sin15 = Math.sin((15/180) * Math.PI);\n\nconst cos30 = Math.sqrt(3)/2;\nconst sin30 = 1/2;\n\n\nLight.LIFESPAN = 400;\nLight.HALF_LIFE = Light.LIFESPAN/2;\nLight.SPEED = 5;\nLight.MAX = 40;\n\nLight.DIRECTIONS = [\n  [1, 0],\n  [-1, 0],\n  [0, 1],\n  [0, -1],\n\n  [sin30, cos30],\n  [sin30, -cos30],\n  [-sin30, cos30],\n  [-sin30, -cos30],\n\n  [cos30, sin30],\n  [-cos30, sin30],\n  [cos30, -sin30],\n  [-cos30, -sin30],\n\n  [cos15, sin15],\n  [-cos15, sin15],\n  [cos15, -sin15],\n  [-cos15, -sin15],\n\n  [sin15, cos15],\n  [-sin15, cos15],\n  [sin15, -cos15],\n  [-sin15, -cos15],\n\n]\n\nexport default Light;","import Util from './util';\nimport Game from './game';\n\nclass MovingObject {\n  constructor(options) {\n    this.pos = options.pos || [100,100];\n    this.vel = options.vel || [0,0];\n    this.radius = options.radius || 10;\n    this.game = options.game;\n    this.color = options.color || \"#ffffff\";\n  }\n\n  draw(ctx) {\n    ctx.fillStyle = this.color;\n\n    ctx.beginPath();\n    ctx.arc(\n      this.pos[0], this.pos[1], this.radius, 0, 2 * Math.PI, true\n    );\n    ctx.fill();\n  }\n\n  move(timeDelta) {\n    const NORMAL_FRAME_TIME_DELTA = 1000 / Game.FPS,\n      velocityScale = timeDelta / NORMAL_FRAME_TIME_DELTA,\n      offsetX = this.vel[0] * velocityScale,\n      offsetY = this.vel[1] * velocityScale;\n\n    this.pos = [this.pos[0] + offsetX, this.pos[1] + offsetY];\n  }\n\n  isCollidedWith(otherObject) {\n    const centerDist = Util.dist(this.pos, otherObject.pos);\n    return centerDist < (this.radius + otherObject.radius);\n  };\n\n\n  remove() {\n    this.game.remove(this);\n  };\n}\n\nexport default MovingObject;","import MovingObject from \"./moving_object\";\nimport Bullet from \"./bullet\";\nimport PortalGun from \"./portal_gun\";\nimport Portal from \"./portal\";\nimport Light from \"./light\";\nimport Util from \"./util\";\nimport Game from \"./game\";\n\nconst maxSpeed = 3;\nconst radius = 25;\n\nclass Player extends MovingObject {\n  constructor(options) {\n    super(options);\n    this.name = options.name || \"player\";\n    this.radius = radius;\n    this.portals = [];\n    this.health = Player.MAX_HEALTH;\n\n    this.bullets = Player.MAX_BULLETS; \n    this.reloading = false;\n\n    this.portalBullets = 0;\n    this.lightCooldown = false;\n    this.portalCooldown = false;\n\n    this.timeStop = false;\n    this.timeStopCooldown = false;\n\n    this.shielding = false;\n    this.shieldHealth = Player.MAX_SHIELD;\n    this.updateCursorPostion();\n    this.cursorPostion = [0,0];\n\n    this.sprite = new Image();\n    this.sprite.src = \"./sprites/player/cat.png\";\n\n\n    this.moving = false;\n    this.frame = 0;\n    this.i = 0;\n  }\n\n  power(delta) {\n    if(this.vel[0] > -maxSpeed && this.vel[0] < maxSpeed) {\n      this.vel[0] += delta[0];\n    }\n\n    if(this.vel[1] > -maxSpeed && this.vel[1] < maxSpeed) {\n      this.vel[1] += delta[1];\n    }\n  }\n\n  move(dir) {\n    const newX = this.pos[0] + Player.MOVES[dir][0] * Player.SPEED;\n    const newY = this.pos[1] + Player.MOVES[dir][1] * Player.SPEED;\n\n    const pi = Math.PI;\n    const radX = Math.cos(45*pi/180)*this.radius;\n    const radY = Math.sin(45*pi/180)*this.radius;\n\n    const topLeft = [newX - radX, newY - radY];\n    const botLeft = [newX - radX, newY + radY];\n    const topRight = [newX + radX, newY - radY];\n    const botRight = [newX + radX, newY + radY];\n\n    if(this.game.portalCollision(topLeft))\n      return this.game.portalCollision(topLeft).teleport(this, topLeft);\n    else if(this.game.portalCollision(botLeft))\n      return this.game.portalCollision(botLeft).teleport(this, botLeft);\n    else if(this.game.portalCollision(topRight))\n      return this.game.portalCollision(topRight).teleport(this, topRight);\n    else if(this.game.portalCollision(botRight))\n      return this.game.portalCollision(botRight).teleport(this, botRight);\n\n  \n    if(this.game.wallCollision(topLeft)\n      || this.game.wallCollision(botLeft)\n      || this.game.wallCollision(topRight)\n      || this.game.wallCollision(botRight)) {\n      return;\n    }\n\n    this.cursorPostion[0] += newX - this.pos[0];\n    this.cursorPostion[1] += newY - this.pos[1];\n\n    this.pos = [newX, newY];\n\n  }\n\n  mouseAngle() {\n    let vect = Util.dir([(this.cursorPostion[0] - this.pos[0]), \n    this.cursorPostion[1] - this.pos[1]]);\n    let x = vect[0];\n    let y = vect[1];\n\n    return Math.atan2(y,x);\n  }\n\n  renderMouse(ctx) {\n    ctx.lineWidth = 0.7;\n    ctx.strokeStyle = \"#ff0000\";\n    ctx.setLineDash([5, 3]);\n    ctx.beginPath();\n    ctx.moveTo(this.pos[0], this.pos[1]);\n    ctx.lineTo(this.cursorPostion[0], this.cursorPostion[1]);\n    ctx.stroke();\n  }\n\n\n  fireBullet(type) {\n    let angle = this.mouseAngle();\n    let relVel = Util.dir([(this.cursorPostion[0] - this.pos[0]), \n    this.cursorPostion[1] - this.pos[1]]);\n    let pos = this.pos.slice();\n    \n    const radX = Math.cos(angle)*this.radius*1.2;\n    const radY = Math.sin(angle)*this.radius*1.2;\n    pos[0] += radX;\n    pos[1] += radY;\n    \n    \n    relVel[0] *= Bullet.SPEED;\n    relVel[1] *= Bullet.SPEED;\n    \n    if(type === \"bullet\") {\n      const bullet = new Bullet({\n        pos: pos,\n        vel: relVel,\n        game: this.game\n      });\n      \n      this.game.add(bullet);\n      this.bullets--;\n      console.log(`Ammo: ${this.bullets}`);\n      \n      if(this.bullets <= 0) {\n        console.log('reloading...');\n        this.reloading = true;\n        this.bullets = Player.MAX_BULLETS;\n        setTimeout(() => {\n          this.reloading = false;\n        }, 1500);\n      }\n      \n    } else if (type === \"portal\") {\n      const portalGun = new PortalGun({\n        pos: pos,\n        vel: relVel,\n        game: this.game,\n        player: this\n      });\n      this.game.add(portalGun);\n      this.portalBullets++;\n      \n      if(this.portalBullets === 2) {\n        this.portalCooldown = true;\n        this.portalBullets = 0;\n        setTimeout(() => {\n          this.portalCooldown = false;\n        }, 5000);\n      }\n      \n    }\n    \n  }\n\n  connectPortals() {\n    this.portals[0].connect(this.portals[1]);\n    this.portals[1].connect(this.portals[0]);\n    \n    this.portals[0].color = Portal.BLUE;\n    this.portals[1].color = Portal.BLUE;\n  }\n  \n  removePortals() {\n    this.portals[0].remove();\n    this.portals[1].remove();\n    this.portals.shift();\n    this.portals.shift();\n  }\n\n  drawShield(ctx) {\n    if(this.shieldHealth > 0) {\n      ctx.lineWidth = 2;\n      ctx.strokeStyle = \"#144b9f\";\n      ctx.setLineDash([5, 1]);\n  \n      ctx.beginPath();\n      ctx.arc(\n        this.pos[0], this.pos[1], this.radius + this.shieldHealth * Player.SHIELD_RADIUS, \n        0, 2 * Math.PI, true\n      );\n  \n      ctx.stroke();\n    }\n  }\n\n  checkShieldHit(otherObject) {\n    const centerDist = Util.dist(this.pos, otherObject.pos);\n    return centerDist < (this.radius + this.shieldHealth * Player.SHIELD_RADIUS + \n      otherObject.radius);\n  }\n\n  shineLight() {\n    for(let i = 0; i < Light.DIRECTIONS.length; i++) {\n      let relVel = Light.DIRECTIONS[i].slice();\n      relVel[0] *= Light.SPEED;\n      relVel[1] *= Light.SPEED;\n\n      let light = new Light({\n        pos: this.pos,\n        vel: relVel,\n        game: this.game\n      });\n\n      this.game.add(light);\n    }\n\n    // this.lightCooldown = true;\n    // setTimeout(() => {\n    //   this.lightCooldown = false;\n    // }, 1000);\n  }\n\n  stopTime() {\n    this.timeStop = true;\n    this.timeStopCooldown = true;\n\n    setTimeout(() => {\n      this.timeStop = false;\n    }, 1000);\n\n    setTimeout(() => {\n      this.timeStopCooldown = false;\n    }, 5000);\n  }\n\n  mouseMove(e) {\n    this.cursorPostion[0] = e.clientX + (-Game.VIEW_X/2 + this.pos[0]);\n    this.cursorPostion[1] = e.clientY + (-Game.VIEW_Y/2 + this.pos[1]);\n  }\n\n  updateCursorPostion() {\n    window.addEventListener('mousemove', e => this.mouseMove(e));\n  }\n\n\n  draw(ctx) {\n\n    if (this.frame > 2) {\n      this.frame = 0;\n    }\n\n    ctx.save();\n\n    ctx.translate(this.pos[0], this.pos[1])\n\n    let angle = this.mouseAngle()*180/Math.PI;\n    let sx, sy;\n\n    if(angle > -45 && angle < 45) {\n      sx = this.frame*48;\n      sy = 2*48;\n    }\n    else if(angle > 45 && angle < 135) {\n      sx = this.frame*48;\n      sy = 0;\n    }\n    else if(angle > 135 || angle < -135) {\n      sx = this.frame*48;\n      sy = 48;\n    }\n    else if(angle > -135 && angle < -45) {\n      sx = this.frame*48;\n      sy = 3*48;\n    }\n\n    if(!this.moving) {\n      sx = 0;\n    }\n\n    // ctx.rotate(this.mouseAngle());\n\n    // ctx.drawImage(this.sprite, \n    //   0,0, 50, 50,\n    //   (this.pos[0]-20), (this.pos[1]-25),\n    //   50, 50\n    // );\n\n    ctx.drawImage(this.sprite, \n      sx,sy, 48, 48,\n      -22, -27,\n      48, 48\n    );\n\n    ctx.restore();\n\n\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = \"rgba(255, 0, 0, 0.5)\";\n    ctx.setLineDash([1,0]);\n    ctx.beginPath();\n    ctx.arc(\n      this.pos[0], this.pos[1], this.radius, 0, 2 * Math.PI, true\n    );\n\n    ctx.stroke();\n\n    if(this.i % 8 === 0) {\n      this.frame++;\n    }\n\n    this.i++;\n  }\n}\n\nconst sideMove = Math.sqrt(2)/2;\n\nPlayer.MAX_BULLETS = 12;\nPlayer.MAX_HEALTH = 3;\nPlayer.MIN_SHIELD = 0;\nPlayer.MAX_SHIELD = 3;\nPlayer.SHIELD_RADIUS = 4;\n\nPlayer.WIDTH = 48;\nPlayer.HEIGHT = 48;\n\n\nPlayer.SPEED = 3;\nPlayer.MOVES = {\n  w: [0, -1],\n  a: [-1, 0],\n  s: [0, 1],\n  d: [1, 0],\n  wa: [-sideMove, -sideMove],\n  wd: [sideMove, -sideMove],\n  sa: [-sideMove, sideMove],\n  sd: [sideMove, sideMove],  \n}\n\n\nexport default Player;","import StaticObject from './static_object';\nimport Player from './player';\nimport Bullet from './bullet';\nimport Light from './light';\n\n\nclass Portal extends StaticObject {\n  constructor(options) {\n    switch(options.dir) {\n      case \"up\":\n        options.topLeft = [options.pos[0] - Portal.WIDTH, options.pos[1]];\n        options.bottomRight = [options.pos[0] + Portal.WIDTH, options.pos[1] + Portal.HEIGHT];\n        break;\n      case \"down\":\n        options.topLeft = [options.pos[0] - Portal.WIDTH, options.pos[1] - Portal.HEIGHT];\n        options.bottomRight = [options.pos[0] + Portal.WIDTH, options.pos[1]];\n        break;\n      case \"left\":\n        options.topLeft = [options.pos[0], options.pos[1] - Portal.WIDTH];\n        options.bottomRight = [options.pos[0] + Portal.HEIGHT, options.pos[1] + Portal.WIDTH];\n        break;\n      case \"right\":\n        options.topLeft = [options.pos[0] - Portal.HEIGHT, options.pos[1] - Portal.WIDTH];\n        options.bottomRight = [options.pos[0], options.pos[1] + Portal.WIDTH];\n        break;\n    }\n\n    super(options);\n    this.active = true;\n    // this.color = options.color || \"#00FF00\";\n    this.color = options.color || Portal.BLUE;\n\n    this.connectedTo = null;\n\n    this.pos = options.pos;\n    this.dir = options.dir;\n\n    this.sprite = new Image();\n    this.frameCount = 0;\n    this.i = 0;\n  }\n\n  teleport(object, pos) {\n    if(this.connectedTo && this.active && (object instanceof Player)) {\n      this.toggleActive();\n      this.connectedTo.toggleActive();\n\n      // let offsetX = (this.pos[0] - pos[0]);\n      // let offsetY = (this.pos[1] - pos[1]);\n      let offsetX = 0;\n      let offsetY = 0;\n  \n      if(this.connectedTo.dir === \"up\") {\n        object.pos[0] = this.connectedTo.pos[0] + offsetX;\n        object.pos[1] = this.connectedTo.pos[1] - Portal.OFFSET + offsetY;\n      }\n      else if(this.connectedTo.dir === \"down\") {\n        object.pos[0] = this.connectedTo.pos[0] + offsetX;\n        object.pos[1] = this.connectedTo.pos[1] + Portal.OFFSET + offsetY;\n      }\n      else if(this.connectedTo.dir === \"left\") {\n        object.pos[0] = this.connectedTo.pos[0] - Portal.OFFSET + offsetX;\n        object.pos[1] = this.connectedTo.pos[1] + offsetY;\n      }\n  \n      else if(this.connectedTo.dir === \"right\") {\n        object.pos[0] = this.connectedTo.pos[0] + Portal.OFFSET + offsetX;\n        object.pos[1] = this.connectedTo.pos[1] + offsetY;\n      }\n    } else if(this.connectedTo && (object instanceof Bullet || object instanceof Light)) {\n      let offsetX = -(this.pos[0] - pos[0]);\n      let offsetY = -(this.pos[1] - pos[1]);\n  \n      if(this.connectedTo.dir === \"up\") {\n        object.pos[0] = this.connectedTo.pos[0] + offsetX;\n        object.pos[1] = this.connectedTo.pos[1] - Portal.OFFSET + offsetY;\n\n        if(this.dir === \"up\") {\n          object.vel[1] = -object.vel[1];\n        } else if(this.dir === \"left\") {\n          let temp = object.vel[0];\n          object.vel[0] = -object.vel[1];\n          object.vel[1] = -temp;\n        } else if(this.dir === \"right\") {\n          let temp = object.vel[0];\n          object.vel[0] = object.vel[1];\n          object.vel[1] = temp;\n        }\n      }\n      else if(this.connectedTo.dir === \"down\") {\n        object.pos[0] = this.connectedTo.pos[0] + offsetX;\n        object.pos[1] = this.connectedTo.pos[1] + Portal.OFFSET + offsetY;\n\n        if(this.dir === \"down\") {\n          object.vel[1] = -object.vel[1];\n        } else if(this.dir === \"left\") {\n          let temp = object.vel[0];\n          object.vel[0] = object.vel[1];\n          object.vel[1] = temp;\n        } else if(this.dir === \"right\") {\n          let temp = object.vel[0];\n          object.vel[0] = -object.vel[1];\n          object.vel[1] = -temp;\n        }\n      }\n      else if(this.connectedTo.dir === \"left\") {\n        object.pos[0] = this.connectedTo.pos[0] - Portal.OFFSET + offsetX;\n        object.pos[1] = this.connectedTo.pos[1] + offsetY;\n\n        if(this.dir === \"left\") {\n          object.vel[0] = -object.vel[0];\n        } else if(this.dir === \"down\") {\n          let temp = object.vel[0];\n          object.vel[0] = object.vel[1];\n          object.vel[1] = temp;\n        } else if(this.dir === \"up\") {\n          let temp = object.vel[0];\n          object.vel[0] = -object.vel[1];\n          object.vel[1] = -temp;\n        }\n  \n      }\n  \n      else if(this.connectedTo.dir === \"right\") {\n        object.pos[0] = this.connectedTo.pos[0] + Portal.OFFSET + offsetX;\n        object.pos[1] = this.connectedTo.pos[1] + offsetY;\n\n        if(this.dir === \"right\") {\n          object.vel[0] = -object.vel[0];\n        } else if(this.dir === \"down\") {\n          let temp = object.vel[0];\n          object.vel[0] = -object.vel[1];\n          object.vel[1] = temp;\n        } else if(this.dir === \"up\") {\n          let temp = object.vel[0];\n          object.vel[0] = object.vel[1];\n          object.vel[1] = -temp;\n        }\n      }\n    }\n\n  }\n\n  draw(ctx) {\n\n    if (this.frameCount > 23) {\n      this.frameCount = 0;\n    }\n\n    this.sprite.src = this.color[this.frameCount];\n \n    if(this.dir === \"up\") {\n      ctx.drawImage(this.sprite, \n        0,0, 846, 841,\n        this.pos[0] - 50, this.pos[1] - 15,\n        100, 40\n      )\n    } else if(this.dir === \"down\") {\n      ctx.drawImage(this.sprite, \n        0,0, 846, 841,\n        this.pos[0] - 50, this.pos[1] - 20,\n        100, 40\n      )\n    } else if(this.dir === \"left\") {\n      ctx.drawImage(this.sprite, \n        0,0, 846, 841,\n        this.pos[0] - 20, this.pos[1] - 50,\n        40, 100\n      )\n    } else if(this.dir === \"right\") {\n      ctx.drawImage(this.sprite, \n        0,0, 846, 841,\n        this.pos[0] - 20, this.pos[1] - 50,\n        40, 100\n      )\n    }\n\n    if(this.i % 8 === 0) {\n      this.frameCount++;\n    }\n\n    this.i++;\n  }\n\n  connect(otherPortal) {\n    this.connectedTo = otherPortal;\n  }\n\n  toggleActive() {\n    let temp = this.connectedTo.color;\n    this.connectedTo.active = false;\n    this.connectedTo.color = Portal.PINK;\n    setTimeout(() => {\n      this.connectedTo.active = true;\n      this.connectedTo.color = temp;\n    }, 500);\n  }\n\n}\n\nPortal.OFFSET = 15;\nPortal.WIDTH = 25;\nPortal.HEIGHT = 5;\n\nPortal.BLUE = [\n  \"./sprites/blue_portal/__blue_portal_effect_large_000.png\",\n  \"./sprites/blue_portal/__blue_portal_effect_large_001.png\",\n  \"./sprites/blue_portal/__blue_portal_effect_large_002.png\",\n  \"./sprites/blue_portal/__blue_portal_effect_large_003.png\",\n  \"./sprites/blue_portal/__blue_portal_effect_large_004.png\",\n  \"./sprites/blue_portal/__blue_portal_effect_large_005.png\",\n  \"./sprites/blue_portal/__blue_portal_effect_large_006.png\",\n  \"./sprites/blue_portal/__blue_portal_effect_large_007.png\",\n  \"./sprites/blue_portal/__blue_portal_effect_large_008.png\",\n  \"./sprites/blue_portal/__blue_portal_effect_large_009.png\",\n  \"./sprites/blue_portal/__blue_portal_effect_large_010.png\",\n  \"./sprites/blue_portal/__blue_portal_effect_large_011.png\",\n  \"./sprites/blue_portal/__blue_portal_effect_large_012.png\",\n  \"./sprites/blue_portal/__blue_portal_effect_large_013.png\",\n  \"./sprites/blue_portal/__blue_portal_effect_large_014.png\",\n  \"./sprites/blue_portal/__blue_portal_effect_large_015.png\",\n  \"./sprites/blue_portal/__blue_portal_effect_large_016.png\",\n  \"./sprites/blue_portal/__blue_portal_effect_large_017.png\",\n  \"./sprites/blue_portal/__blue_portal_effect_large_018.png\",\n  \"./sprites/blue_portal/__blue_portal_effect_large_019.png\",\n  \"./sprites/blue_portal/__blue_portal_effect_large_020.png\",\n  \"./sprites/blue_portal/__blue_portal_effect_large_021.png\",\n  \"./sprites/blue_portal/__blue_portal_effect_large_022.png\",\n  \"./sprites/blue_portal/__blue_portal_effect_large_023.png\"\n];\n\nPortal.PINK = [\n  \"./sprites/pink_portal/__pink_portal_effect_large_000.png\",\n  \"./sprites/pink_portal/__pink_portal_effect_large_001.png\",\n  \"./sprites/pink_portal/__pink_portal_effect_large_002.png\",\n  \"./sprites/pink_portal/__pink_portal_effect_large_003.png\",\n  \"./sprites/pink_portal/__pink_portal_effect_large_004.png\",\n  \"./sprites/pink_portal/__pink_portal_effect_large_005.png\",\n  \"./sprites/pink_portal/__pink_portal_effect_large_006.png\",\n  \"./sprites/pink_portal/__pink_portal_effect_large_007.png\",\n  \"./sprites/pink_portal/__pink_portal_effect_large_008.png\",\n  \"./sprites/pink_portal/__pink_portal_effect_large_009.png\",\n  \"./sprites/pink_portal/__pink_portal_effect_large_010.png\",\n  \"./sprites/pink_portal/__pink_portal_effect_large_011.png\",\n  \"./sprites/pink_portal/__pink_portal_effect_large_012.png\",\n  \"./sprites/pink_portal/__pink_portal_effect_large_013.png\",\n  \"./sprites/pink_portal/__pink_portal_effect_large_014.png\",\n  \"./sprites/pink_portal/__pink_portal_effect_large_015.png\",\n  \"./sprites/pink_portal/__pink_portal_effect_large_016.png\",\n  \"./sprites/pink_portal/__pink_portal_effect_large_017.png\",\n  \"./sprites/pink_portal/__pink_portal_effect_large_018.png\",\n  \"./sprites/pink_portal/__pink_portal_effect_large_019.png\",\n  \"./sprites/pink_portal/__pink_portal_effect_large_020.png\",\n  \"./sprites/pink_portal/__pink_portal_effect_large_021.png\",\n  \"./sprites/pink_portal/__pink_portal_effect_large_022.png\",\n  \"./sprites/pink_portal/__pink_portal_effect_large_023.png\"\n];\n\nexport default Portal;","import Bullet from './bullet';\nimport Portal from './portal';\nimport Game from './game';\n\n\nclass PortalGun extends Bullet {\n  constructor(options) {\n    super(options);\n    this.player = options.player;\n\n    this.color = \"#800080\";\n  }\n\n  move(timeDelta) {\n    const NORMAL_FRAME_TIME_DELTA = 1000 / Game.FPS,\n      velocityScale = timeDelta / NORMAL_FRAME_TIME_DELTA,\n      offsetX = this.vel[0] * velocityScale,\n      offsetY = this.vel[1] * velocityScale;\n\n    const newX = this.pos[0] + offsetX;\n    const newY = this.pos[1] + offsetY;\n\n    const collisionX = this.game.wallCollision([this.pos[0], newY]);\n    const collisionY = this.game.wallCollision([newX, this.pos[1]]);\n\n\n    let portal;\n    let color;\n    if(this.player.portals.length === 0 || this.player.portals.length === 2) \n      color = Portal.PINK;\n    else \n      color = Portal.BLUE;\n\n\n    if(collisionX && offsetY < 0) {\n      this.remove();\n      portal = new Portal({\n        pos: [this.pos[0], newY + 5],\n        color: color,\n        game: this.game,\n        dir: \"down\"\n      });\n      \n      this.player.portals.push(portal);\n      this.game.add(portal);\n    } else if(collisionX && offsetY > 0) {\n\n      this.remove();\n      portal = new Portal({\n        pos: [newX, this.pos[1]],\n        color: color,\n        game: this.game,\n        dir: \"up\"\n      });\n\n      this.player.portals.push(portal);\n      this.game.add(portal);\n\n    } else if (collisionY && offsetX > 0) {\n      this.remove();\n      portal = new Portal({\n        pos: [newX - 5, this.pos[1]],\n        color: color,\n        game: this.game,\n        dir: \"left\"\n      });\n\n      this.player.portals.push(portal);\n      this.game.add(portal);\n\n    } else if (collisionY && offsetX < 0) {\n      this.remove();\n      portal = new Portal({\n        pos: [newX + 5, this.pos[1]],\n        color: color,\n        game: this.game,\n        dir: \"right\"\n      });\n\n      this.player.portals.push(portal);\n      this.game.add(portal);\n    }\n\n    this.pos = [this.pos[0] + (this.vel[0] * velocityScale), \n      this.pos[1] + (this.vel[1] * velocityScale)];\n  }\n}\n\nPortalGun.RADIUS = 5;\nPortalGun.OFFSET = 5;\n\n\nexport default PortalGun;","class Rectangle {\n constructor(left, top, width, height) {\n  this.left = left || 0;\n  this.top = top || 0;\n  this.width = width || 0;\n  this.height = height || 0;\n  this.right = this.left + this.width;\n  this.bottom = this.top + this.height;\n }\n\n set(left, top, width, height) {\n  this.left = left;\n  this.top = top;\n  this.width = width || this.width;\n  this.height = height || this.height\n  this.right = (this.left + this.width);\n  this.bottom = (this.top + this.height); \n }\n\n within(rect) {\n  return (rect.left <= this.left &&\n    rect.right >= this.right &&\n    rect.top <= this.top &&\n    rect.bottom >= this.bottom);\n }\n\n\n}\n\nexport default Rectangle;","class StaticObject {\n\n  constructor(options) {\n    this.topLeft = options.topLeft;\n    this.bottomRight = options.bottomRight;\n    this.width = this.bottomRight[0] - this.topLeft[0];\n    this.height = this.bottomRight[1] - this.topLeft[1];\n    this.color =  options.color || \"#000000\";\n    this.game = options.game;\n  }\n\n  draw(ctx) {\n    // ctx.fillStyle = \"rgba(20, 20, 20, 0.5)\";\n    ctx.fillStyle = this.color;\n    ctx.fillRect(this.topLeft[0], this.topLeft[1], this.width, this.height);\n  }\n\n\n  remove() {\n    this.game.remove(this);\n  };\n\n\n\n} \n\nexport default StaticObject;","const Util = {\n  // Normalize the length of the vector to 1, maintaining direction.\n  dir(vec) {\n    const norm = Util.norm(vec);\n    return Util.scale(vec, 1 / norm);\n  },\n  // Find distance between two points.\n  dist(pos1, pos2) {\n    return Math.sqrt(\n      Math.pow(pos1[0] - pos2[0], 2) + Math.pow(pos1[1] - pos2[1], 2)\n    );\n  },\n  // Find the length of the vector.\n  norm(vec) {\n    return Util.dist([0, 0], vec);\n  },\n  // Return a randomly oriented vector with the given length.\n  randomVec(length) {\n    const deg = 2 * Math.PI * Math.random();\n    return Util.scale([Math.sin(deg), Math.cos(deg)], length);\n  },\n  // Scale the length of a vector by the given amount.\n  scale(vec, m) {\n    return [vec[0] * m, vec[1] * m];\n  },\n  wrap(coord, max) {\n    if (coord < 0) {\n      return max - (coord % max);\n    } else if (coord > max) {\n      return coord % max;\n    } else {\n      return coord;\n    }\n  }\n};\n\nmodule.exports = Util;\n","import StaticObject from './static_object';\n\nclass Wall extends StaticObject {\n  constructor(options) {\n    super(options);\n    this.passable = false;\n  }\n\n\n} \n\nexport default Wall;"],"sourceRoot":""}