{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/bullet.js","webpack:///./lib/game.js","webpack:///./lib/game_view.js","webpack:///./lib/index.js","webpack:///./lib/moving_object.js","webpack:///./lib/player.js","webpack:///./lib/static_object.js","webpack:///./lib/util.js","webpack:///./lib/wall.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAA2C;AACjB;;AAE1B,qBAAqB,sDAAY;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;;AAIA;AACA,2CAA2C,6CAAI;AAC/C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEe,qEAAM,E;;;;;;;;;;;;ACtDrB;AAAA;AAAA;AAAA;AAA8B;AACA;AACJ;;AAE1B;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA,yBAAyB,+CAAM;AAC/B;AACA,KAAK,4BAA4B,+CAAM;AACvC;AACA,KAAK,4BAA4B,6CAAI;AACrC;AACA;AACA;;AAEA;AACA,0BAA0B,+CAAM;AAChC;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,uBAAuB,+CAAM;AAC7B;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA,mBAAmB,6CAAI;AACvB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,oBAAoB,6CAAI;AACxB;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA,6BAA6B,6CAAI,sBAAsB,+CAAM;AAC7D;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB,yBAAyB;AAC3C;AACA;AACA,O;AACA;AACA;AACA,O;;AAEA,uCAAuC,+CAAM;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB,uBAAuB;AACzC;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,uDAAuD,cAAc;AACrE,wDAAwD,cAAc;;AAEtE,qCAAqC,oBAAoB,YAAY,E;AACrE,sCAAsC,oBAAoB,YAAY;;AAEtE;AACA;AACA;;AAEA;AACA,kBAAkB,uBAAuB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,O;AACA;AACA;;AAEA;AACA;;AAEA,kBAAkB,uBAAuB;AACzC,oBAAoB,uBAAuB;AAC3C;AACA;AACA;;AAEA;AACA,6BAA6B,+CAAM;AACnC;AACA;;AAEA;AACA,6BAA6B,+CAAM;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,+CAAM;AAChC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEe,mEAAI,E;;;;;;;;;;;;AC/LnB;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,YAAY,QAAQ,QAAQ;AAC5B;AACA;AACA;AACA,KAAK;;AAEL;AACA,8B;AACA,KAAK;;;AAGL;AACA;AACA,KAAK;;AAEL;AACA;;AAEA,uBAAuB,yBAAyB,EAAE;;;AAGlD;AACA,QAAQ;AACR;;AAEA,YAAY,QAAQ,QAAQ;AAC5B;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,K;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,uEAAQ,E;;;;;;;;;;;;AC/FvB;AAAA;AAAA;AAAA;AAAA;AAA0B;AACS;AACQ;AACb;;;AAG9B;AACA;AACA,mBAAmB,6CAAI;AACvB,oBAAoB,6CAAI;AACxB;;AAEA;AACA;AACA,mBAAmB,6CAAI;;AAEvB;;AAEA,MAAM,kDAAQ;;AAEd,CAAC;;;;;;;;;;;;;;;ACpBD;AAAA;AAAA;AAAA;AAA0B;AACA;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C,6CAAI;AAC/C;AACA;AACA;;AAEA;AACA;;AAEA;AACA,uBAAuB,4CAAI;AAC3B;AACA;;AAEA;AACA;AACA;AACA;;AAEe,2EAAY,E;;;;;;;;;;;;ACzC3B;AAAA;AAAA;AAAA;AAAA;AAA2C;AACb;AACJ;;AAE1B;AACA;AACA,qBAAqB,sDAAY;AACjC;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,eAAe,4CAAI;AACnB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,iBAAiB,4CAAI;AACrB;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA,iBAAiB,+CAAM;AACvB,iBAAiB,+CAAM;AACvB,uBAAuB,+CAAM;AAC7B;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,qEAAM,E;;;;;;;;;;;;AC1IrB;AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA,C;;AAEe,2EAAY,E;;;;;;;;;;;AC5B3B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACpCA;AAAA;AAA2C;;AAE3C,mBAAmB,sDAAY;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA,C;;AAEe,mEAAI,E","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./lib/index.js\");\n","import MovingObject from './moving_object';\nimport Game from './game';\n\nclass Bullet extends MovingObject {\n  constructor(options) {\n    options.radius = Bullet.RADIUS;\n    super(options);\n    this.bounceCount = 0;\n  }\n\n  bounce(direction) {\n    if(direction === \"horizontal\") {\n      this.vel[1] *= -1;\n    } else if (direction === \"vertical\") {\n      this.vel[0] *= -1;\n    } else {\n      this.vel[0] *= -1;\n      this.vel[1] *= -1;\n    }\n    this.bounceCount++;\n  }\n\n\n\n  move(timeDelta) {\n    const NORMAL_FRAME_TIME_DELTA = 1000 / Game.FPS,\n      velocityScale = timeDelta / NORMAL_FRAME_TIME_DELTA,\n      offsetX = this.vel[0] * velocityScale,\n      offsetY = this.vel[1] * velocityScale;\n\n    const newX = this.pos[0] + offsetX;\n    const newY = this.pos[1] + offsetY;\n\n    const collisionX = this.game.wallCollision([this.pos[0], newY]);\n    const collisionY = this.game.wallCollision([newX, this.pos[1]]);\n    const collisionXY = this.game.wallCollision([newX, newY]);\n\n    if(collisionX) {\n      this.bounce(\"horizontal\");\n    } else if (collisionY) {\n      this.bounce(\"vertical\");\n    } else if (collisionXY) {\n      this.bounce(\"both\");\n    }\n\n    this.pos = [this.pos[0] + (this.vel[0] * velocityScale), \n      this.pos[1] + (this.vel[1] * velocityScale)];\n  }\n}\n\nBullet.RADIUS = 2;\nBullet.SPEED = 10;\nBullet.LIFESPAN = 5;\n\nexport default Bullet;","import Player from './player';\nimport Bullet from './bullet';\nimport Wall from './wall';\n\nclass Game {\n  constructor() {\n    this.players = [];\n    this.bullets = [];\n    this.walls = [];\n\n    this.addWall();\n  }\n  \n\n  add(object) {\n    if(object instanceof Player) {\n      this.players.push(object);\n    } else if (object instanceof Bullet) {\n      this.bullets.push(object);\n    } else if (object instanceof Wall) {\n      this.walls.push(object);\n    }\n  }\n\n  remove(object) {\n    if (object instanceof Bullet) {\n      this.bullets.splice(this.bullets.indexOf(object), 1);\n    } else {\n      throw new Error(\"unknown type of object\");\n    }\n  }\n\n  addPlayer() {\n    const player = new Player({\n      game: this,\n      pos: [400,400]\n    });\n\n    this.add(player);\n    return player;\n  }\n\n  addWall() {\n    let wall = new Wall({\n      topLeft: [0,0],\n      bottomRight: [100,100],\n      direction: \"vertical\",\n      game: this\n    });\n    this.add(wall);\n    let wall2 = new Wall({\n      topLeft: [100,100],\n      bottomRight: [300,300],\n      direction: \"vertical\",\n      game: this\n    });\n    this.add(wall2);\n\n  }\n\n  allMovingObjects() {\n    return [].concat(this.players, this.bullets);\n  }\n\n  allObjects() {\n    return [].concat(this.players, this.bullets, this.walls);\n  }\n\n  draw(ctx) {\n    this.checkBounce();\n    // this.wallCollissionCircle(this.players[0]);\n    this.wallCollision(this.players[0].pos);\n    ctx.clearRect(0, 0, Game.DIM_X, Game.DIM_Y);\n    ctx.fillStyle = Game.BG_COLOR;\n    ctx.fillRect(0, 0, Game.DIM_X, Game.DIM_Y);\n\n    this.allObjects().forEach(object => {\n      object.draw(ctx);\n    });\n\n    this.players[0].renderMouse(ctx);\n  }\n\n  moveObjects(delta) {\n    this.allObjects().forEach(object => {\n      if(!(object instanceof Wall || object instanceof Player))\n        object.move(delta);\n    });\n  }\n\n  step(delta) {\n    this.moveObjects(delta);\n    this.checkCollissions();\n  }\n\n  checkBounds(pos) {\n    return (pos[0] < 0) || (pos[1] < 0) ||\n    (pos[0] > Game.DIM_X) || (pos[1] > Game.DIM_Y);\n  }\n\n  checkBounce() {\n    for(let i = 0; i < this.bullets.length; i++) {\n      if(this.bullets[i].pos[0] < 0 || this.bullets[i].pos[0] > Game.DIM_X) {\n        this.bullets[i].bounce(\"vertical\");\n      } \n      else if(this.bullets[i].pos[1] < 0 || this.bullets[i].pos[1] > Game.DIM_Y) {\n        this.bullets[i].bounce(\"horizontal\");\n      } \n\n      if(this.bullets[i].bounceCount > Bullet.LIFESPAN) {\n        let bullet = this.bullets[i];\n        this.bullets[i].remove();\n      }\n    }\n  }\n\n  wallCollissionCircle(player) {\n    for(let i = 0; i < this.walls.length; i++) {\n      let wall = this.walls[i];\n\n      let midpointX = (wall.topLeft[0] + wall.bottomRight[0])/2;\n      let midpointY = (wall.topLeft[1] + wall.bottomRight[1])/2;\n\n      let width =  wall.bottomRight[0] - wall.topLeft[0];\n      let height = wall.bottomRight[1] - wall.topLeft[1];\n      \n      let circleDistX = Math.abs(player.pos[0] - midpointX);\n      let circleDistY = Math.abs(player.pos[1] - midpointY);\n\n      // if (circleDistX > (width/2 + player.radius)) { return false; }\n      // if (circleDistY > (height/2 + player.radius)) { return false; }\n\n      if (circleDistX <= (width/2)) { console.log(\"hit\");return true; } \n      if (circleDistY <= (height/2)) { console.log(\"hit\");return true; }\n\n    }\n    return false;\n  }\n\n  wallCollision(pos) {\n    for(let i = 0; i < this.walls.length; i++) {\n      let wall = this.walls[i];\n      if( !((pos[0] < wall.topLeft[0]) \n        || (pos[0] > wall.bottomRight[0])\n        || (pos[1] < wall.topLeft[1])\n        || (pos[1] > wall.bottomRight[1]))) {\n          return true;\n      } \n    }\n  }\n\n  checkCollissions() {\n    const allObjects = this.allMovingObjects();\n\n    for(let i = 0; i < allObjects.length; i++) {\n      for(let j = 0; j < allObjects.length; j++) {\n        if(i === j) continue;\n        const obj1 = allObjects[i];\n        const obj2 = allObjects[j];\n\n        if (obj1.isCollidedWith(obj2)) {\n          if(obj1 instanceof Bullet) {\n            this.remove(obj1);\n            console.log(\"collision\")\n\n          }\n          if(obj2 instanceof Bullet) {\n            console.log(\"collision\")\n            this.remove(obj2);\n          }\n          // const collision = obj1.collideWith(obj2);\n          // if (collision) return;\n          \n        }\n      }\n    }\n  }\n\n  remove(object) {\n    if (object instanceof Bullet) {\n      this.bullets.splice(this.bullets.indexOf(object), 1);\n    }\n  }\n\n}\n\nGame.BG_COLOR = \"#000000\";\nGame.DIM_X = 1000;\nGame.DIM_Y = 600;\nGame.FPS = 32;\n\nexport default Game;","class GameView {\n  constructor(game, ctx) {\n    this.ctx = ctx;\n    this.game = game;\n    this.player = this.game.addPlayer();\n\n    this.keyUp = this.keyUp.bind(this);\n  }\n  \n  // w = 87; d = 68; a = 65; s = 83;\n  bindKeyHandlers() {\n    window.addEventListener(\"keydown\", (e) => {\n      keys[e.keyCode] = true;\n    });\n\n    window.addEventListener(\"keyup\", (e) => {\n      keys[e.keyCode] = false; \n    });\n\n\n    document.addEventListener(\"mousedown\",() => {\n      this.player.fireBullet();\n    });\n\n    // Object.keys(GameView.MOVES).forEach((k) => {\n    //   const move = GameView.MOVES[k];\n\n    //   key(k, () => { this.player.power(move); });\n\n\n    //   document.addEventListener(\"keyup\", this.keyUp);\n    // });\n  }\n\n  // w = 87; d = 68; a = 65; s = 83;\n  keyPressed() {\n    if (keys[87] && keys[65]) {\n      this.player.move(\"wa\");\n    } else if (keys[87] && keys[68]) {\n      this.player.move(\"wd\");\n    } else if (keys[83] && keys[65]) {\n      this.player.move(\"sa\");\n    } else if (keys[83] && keys[68]) {\n      this.player.move(\"sd\");\n    } else if(keys[87]) {\n      this.player.move(\"w\");\n    } else if (keys[65]) {\n      this.player.move(\"a\");\n    } else if (keys[83]) {\n      this.player.move(\"s\");\n    } else if (keys[68]) {\n      this.player.move(\"d\");\n    } \n  }\n\n\n  keyUp(e) {\n    if(e.key === \"w\" || e.key === \"s\" ) \n      this.player.vel[1] = 0;\n    if (e.key === \"a\" || e.key === \"d\")\n      this.player.vel[0] = 0;\n  }\n\n  start() {\n    this.bindKeyHandlers();\n    this.lastTime = 0;\n    // start the animation\n    requestAnimationFrame(this.animate.bind(this));\n  }\n\n  animate(time) {\n    const timeDelta = time - this.lastTime;\n    this.keyPressed();\n    this.game.step(timeDelta);\n    this.game.draw(this.ctx);\n    this.lastTime = time;\n\n    // every call to animate requests causes another call to animate\n    requestAnimationFrame(this.animate.bind(this));\n  }\n}\n\nconst accel = 3;\nconst sideMove = Math.sqrt(accel+accel)/2;\n\nconst keys = {};\n\nGameView.MOVES = {\n  w: [0, -accel],\n  a: [-accel, 0],\n  s: [0, accel],\n  d: [accel, 0],\n  wa: []\n};\n\nexport default GameView;","import Game from './game';\nimport GameView from './game_view';\nimport MovingObject from './moving_object';\nimport Player from './player';\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const canvasEl = document.getElementById(\"game-canvas\");\n  canvasEl.width = Game.DIM_X;\n  canvasEl.height = Game.DIM_Y;\n  const ctx = canvasEl.getContext(\"2d\");\n\n  window.canvas = canvasEl;\n  window.rect = canvasEl.getBoundingClientRect();\n  const game = new Game();\n\n  window.game = game;\n\n  new GameView(game, ctx).start();\n\n});\n\n\n","import Util from './util';\nimport Game from './game';\n\nclass MovingObject {\n  constructor(options) {\n    this.pos = options.pos || [100,100];\n    this.vel = options.vel || [0,0];\n    this.radius = options.radius || 10;\n    this.game = options.game;\n    this.color = options.color || \"#00FF00\";\n  }\n\n  draw(ctx) {\n    ctx.fillStyle = this.color;\n\n    ctx.beginPath();\n    ctx.arc(\n      this.pos[0], this.pos[1], this.radius, 0, 2 * Math.PI, true\n    );\n    ctx.fill();\n  }\n\n  move(timeDelta) {\n    const NORMAL_FRAME_TIME_DELTA = 1000 / Game.FPS,\n      velocityScale = timeDelta / NORMAL_FRAME_TIME_DELTA,\n      offsetX = this.vel[0] * velocityScale,\n      offsetY = this.vel[1] * velocityScale;\n\n    this.pos = [this.pos[0] + offsetX, this.pos[1] + offsetY];\n  }\n\n  isCollidedWith(otherObject) {\n    const centerDist = Util.dist(this.pos, otherObject.pos);\n    return centerDist < (this.radius + otherObject.radius);\n  };\n\n  remove() {\n    this.game.remove(this);\n  };\n}\n\nexport default MovingObject;","import MovingObject from \"./moving_object\";\nimport Bullet from \"./bullet\";\nimport Util from \"./util\";\n\nconst maxSpeed = 3;\nconst radius = 10;\nclass Player extends MovingObject {\n  constructor(options) {\n    super(options);\n    this.name = options.name || \"player\";\n    this.radius = radius;\n\n\n    this.updateCursorPostion();\n    this.cursorPostion = [0,0];\n    this.angle = 0;\n  }\n\n  power(delta) {\n    if(this.vel[0] > -maxSpeed && this.vel[0] < maxSpeed) {\n      this.vel[0] += delta[0];\n    }\n\n    if(this.vel[1] > -maxSpeed && this.vel[1] < maxSpeed) {\n      this.vel[1] += delta[1];\n    }\n  }\n\n  move(dir) {\n    const newX = this.pos[0] + Player.MOVES[dir][0] * Player.SPEED;\n    const newY = this.pos[1] + Player.MOVES[dir][1] * Player.SPEED;\n\n    const pi = Math.PI;\n    const radX = Math.cos(45*pi/180)*this.radius;\n    const radY = Math.sin(45*pi/180)*this.radius;\n\n    const topLeft = [newX - radX, newY - radY];\n    const botLeft = [newX - radX, newY + radY];\n    const topRight = [newX + radX, newY - radY];\n    const botRight = [newX + radX, newY + radY];\n\n    if(this.game.wallCollision(topLeft)\n      || this.game.wallCollision(botLeft)\n      || this.game.wallCollision(topRight)\n      || this.game.wallCollision(botRight)) {\n      return;\n    }\n\n    this.pos = [newX, newY];\n  }\n\n\n\n  // radToDeg(angle) {\n  //   return angle * (180 / Math.PI);\n  // }\n\n  // degToRad(angle) {\n  //   return angle * (Math.PI / 180);\n  // }\n\n  mouseAngle() {\n    let vect = Util.dir([(this.cursorPostion[0] - this.pos[0]), \n    this.cursorPostion[1] - this.pos[1]]);\n    let x = vect[0];\n    let y = vect[1];\n\n    // angle[0] *= this.radius;\n    // angle[1] *= this.radius;\n\n    // this.angle = Math.atan2(y,x);\n    return Math.atan2(y,x);\n  }\n\n  renderMouse(ctx) {\n    ctx.lineWidth = 2;\n    ctx.strokeStyle = \"#0000ff\";\n    ctx.beginPath();\n    ctx.moveTo(this.pos[0], this.pos[1]);\n    ctx.lineTo(this.cursorPostion[0], this.cursorPostion[1]);\n    ctx.stroke();\n  }\n\n\n  fireBullet() {\n    let angle = this.mouseAngle();\n    let relVel = Util.dir([(this.cursorPostion[0] - this.pos[0]), \n    this.cursorPostion[1] - this.pos[1]]);\n    let pos = this.pos.slice();\n\n\n    const pi = Math.PI;\n    const radX = Math.cos(angle)*this.radius;\n    const radY = Math.sin(angle)*this.radius;\n    pos[0] += radX;\n    pos[1] += radY;\n\n\n    relVel[0] *= Bullet.SPEED;\n    relVel[1] *= Bullet.SPEED;\n    const bullet = new Bullet({\n      pos: pos,\n      vel: relVel,\n      game: this.game\n    });\n\n    this.game.add(bullet);\n  }\n\n  shield() {\n\n  }\n\n\n\n  updateCursorPostion() {\n    window.addEventListener('mousemove', (e) => {\n      this.cursorPostion[0] = e.clientX;\n      this.cursorPostion[1] = e.clientY;\n    });\n  }\n\n}\n\nconst sideMove = Math.sqrt(2)/2;\n\nPlayer.SPEED = 3;\nPlayer.MOVES = {\n  w: [0, -1],\n  a: [-1, 0],\n  s: [0, 1],\n  d: [1, 0],\n  wa: [-sideMove, -sideMove],\n  wd: [sideMove, -sideMove],\n  sa: [-sideMove, sideMove],\n  sd: [sideMove, sideMove],  \n}\n\nexport default Player;","class StaticObject {\n\n  constructor(options) {\n    // this.startPos = options.startPos;\n    // this.endPos = options.endPos;\n    // this.length = options.length;\n\n    this.topLeft = options.topLeft;\n    this.bottomRight = options.bottomRight;\n    this.direction = options.direction;\n    this.width = this.bottomRight[0] - this.topLeft[0];\n    this.height = this.bottomRight[1] - this.topLeft[1];\n    this.color =  options.color || \"#0000ff\";\n    this.game = options.game;\n  }\n\n  draw(ctx) {\n    ctx.fillStyle = this.color;\n    ctx.fillRect(this.topLeft[0], this.topLeft[1], this.width, this.height);\n  }\n\n  collideWith(otherObj) {\n    \n  }\n\n\n} \n\nexport default StaticObject;","const Util = {\n  // Normalize the length of the vector to 1, maintaining direction.\n  dir(vec) {\n    const norm = Util.norm(vec);\n    return Util.scale(vec, 1 / norm);\n  },\n  // Find distance between two points.\n  dist(pos1, pos2) {\n    return Math.sqrt(\n      Math.pow(pos1[0] - pos2[0], 2) + Math.pow(pos1[1] - pos2[1], 2)\n    );\n  },\n  // Find the length of the vector.\n  norm(vec) {\n    return Util.dist([0, 0], vec);\n  },\n  // Return a randomly oriented vector with the given length.\n  randomVec(length) {\n    const deg = 2 * Math.PI * Math.random();\n    return Util.scale([Math.sin(deg), Math.cos(deg)], length);\n  },\n  // Scale the length of a vector by the given amount.\n  scale(vec, m) {\n    return [vec[0] * m, vec[1] * m];\n  },\n  wrap(coord, max) {\n    if (coord < 0) {\n      return max - (coord % max);\n    } else if (coord > max) {\n      return coord % max;\n    } else {\n      return coord;\n    }\n  }\n};\n\nmodule.exports = Util;\n","import StaticObject from './static_object';\n\nclass Wall extends StaticObject {\n  constructor(options) {\n    super(options);\n    this.passable = false;\n  }\n\n  // draw(ctx) {\n  //   ctx.lineWidth = this.width;\n  //   ctx.strokeStyle = this.color;\n  //   ctx.beginPath();\n  //   ctx.moveTo(this.startPos[0], this.startPos[1]);\n  //   ctx.lineTo(this.endPos[0], this.endPos[1]);\n  //   ctx.stroke();\n  // }\n\n  collideWith(otherObj) {\n\n  }\n\n\n} \n\nexport default Wall;"],"sourceRoot":""}