{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/bullet.js","webpack:///./lib/enemies/chaser.js","webpack:///./lib/enemies/chaser_hive.js","webpack:///./lib/enemies/enemy.js","webpack:///./lib/game.js","webpack:///./lib/game_view.js","webpack:///./lib/index.js","webpack:///./lib/levels.js","webpack:///./lib/light.js","webpack:///./lib/moving_object.js","webpack:///./lib/player.js","webpack:///./lib/portal.js","webpack:///./lib/portal_gun.js","webpack:///./lib/static_object.js","webpack:///./lib/util.js","webpack:///./lib/wall.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAA2C;AACjB;;AAE1B,qBAAqB,sDAAY;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,iB;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA,2CAA2C,6CAAI;AAC/C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEe,qEAAM,E;;;;;;;;;;;;AC5HrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;AACgB;AACjB;AACA;;;AAG3B,qBAAqB,sDAAY;AACjC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,K;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iB;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA,2CAA2C,6CAAI;AAC/C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,K;;AAEA;;AAEA;AACA,uBAAuB,4CAAI;AAC3B;;AAEA;AACA,oBAAoB,4CAAI;AACxB,0BAA0B,4CAAI;AAC9B;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,4CAAI;AACxB;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEe,qEAAM,E;;;;;;;;;;;;AChJrB;AAAA;AAAA;AAAA;AAAA;AAA4C;AACjB;AACG;;AAE9B,yBAAyB,sDAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,eAAe,4CAAI;AACnB;AACA;;AAEA;;AAEA;AACA,qC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AACA;AACA,qC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qC;AACA;AACA;AACA;AACA;AACA;AACA,4C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,iBAAiB;;AAEnC;AACA;AACA;;AAEA,uBAAuB,+CAAM;AAC7B;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sCAAsC,wBAAwB;AAC9D;AACA;;AAEA;AACA,kBAAkB,yBAAyB;AAC3C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,4CAAI;AACf;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,O;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGe,yEAAU,E;;;;;;;;;;;;AChQzB;AAAA;AAA4C;;AAE5C,oBAAoB,sDAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,oEAAK,EAAC;;;;;;;;;;;;;;ACXrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;AACA;AACJ;AACI;AACO;AACT;AACmB;AACZ;AACG;AACR;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,+CAAM;AACvB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA,yBAAyB,+CAAM;AAC/B;AACA,KAAK,4BAA4B,+CAAM;AACvC;AACA,KAAK,4BAA4B,6CAAI;AACrC;AACA,KAAK,4BAA4B,+CAAM;AACvC;AACA,KAAK,4BAA4B,8CAAK;AACtC;AACA,KAAK,4BAA4B,4DAAU;AAC3C,wBAAwB,uDAAM;AAC9B;AACA;AACA;;AAEA;AACA,0BAA0B,+CAAM;AAChC;AACA,KAAK,4BAA4B,+CAAM;AACvC;AACA,KAAK,4BAA4B,8CAAK;AACtC;AACA,KAAK,4BAA4B,4DAAU;AAC3C,wBAAwB,uDAAM;AAC9B;AACA,K;;AAEA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,+CAAM;AAC7B;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA,uBAAuB,6CAAI;AAC3B;AACA;;AAEA;AACA;AACA,wBAAwB,6CAAI;AAC5B;;AAEA;AACA;AACA,sBAAsB,oBAAoB;AAC1C,yBAAyB,4DAAU;AACnC;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,oBAAoB;AAC1C,4BAA4B,+CAAM;AAClC;AACA;AACA;AACA,WAAW;AACX,4BAA4B,+CAAM;AAClC;AACA;AACA;AACA,WAAW;;AAEX;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2B;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;AAIA;AACA;;;AAGA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;AACA;;;;AAIA;AACA;AACA,KAAK;;;AAGL;AACA,wB;AACA;AACA;AACA;AACA;AACA,2CAA2C,8BAA8B;AACzE;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,6BAA6B,+CAAM;AACnC;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA,kBAAkB,uBAAuB;AACzC;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,uDAAuD,cAAc;AACrE,wDAAwD,cAAc;;AAEtE,qCAAqC,oBAAoB,YAAY,E;AACrE,sCAAsC,oBAAoB,YAAY;;AAEtE;AACA;AACA;;AAEA;AACA,kBAAkB,uBAAuB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,O;AACA;AACA;AACA;;AAEA;AACA,kBAAkB,sBAAsB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,O;AACA;AACA;AACA;;AAEA;AACA,kBAAkB,yBAAyB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,O;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,uBAAuB;AACzC,oBAAoB,uBAAuB;AAC3C;AACA;AACA;;AAEA,2BAA2B,+CAAM,oBAAoB,uDAAM;AAC3D,+BAA+B,mDAAS;;AAExC;AACA;AACA,+BAA+B,uDAAM;AACrC;AACA;AACA;AACA,e;AACA;AACA;AACA,W;AACA;AACA,+BAA+B,uDAAM;AACrC;AACA;AACA;AACA,e;AACA;AACA,oCAAoC,+CAAM;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,6BAA6B,4DAAU,qBAAqB,8CAAK,oBAAoB,+CAAM;AAC3F,+BAA+B,mDAAS;AACxC;AACA;AACA,6BAA6B,uDAAM,oBAAoB,+CAAM;AAC7D,8BAA8B,mDAAS;AACvC;;AAEA;AACA;AACA,a;AACA;AACA;AACA;AACA;AACA,W;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;;AAEe,mEAAI,E;;;;;;;;;;;;AC1YnB;AAAA;AAAA;AAAA;AAA8B;AAC9B;AAC0B;AACI;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,kEAAkE,WAAW,IAAI,+CAAM,kBAAkB;AACzG,OAAO,+CAAM;AACb,0DAA0D,+CAAM;AAChE;AACA,OAAO,+CAAM;AACb,0DAA0D,+CAAM;AAChE;;AAEA,oBAAoB,6CAAI;AACxB;AACA;;AAEA;AACA;AACA;;AAEA,oBAAoB,6CAAI;AACxB;AACA;AACA;AACA;AACA,4IAA4I;;;AAG5I;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oBAAoB,6CAAI;AACxB;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,6CAAI;AACxB;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA,YAAY,QAAQ,QAAQ;AAC5B;AACA;AACA;AACA,KAAK;;AAEL;AACA,8B;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL,oB;AACA;AACA,yC;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;;AAGL,oB;AACA;AACA,+B;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,O;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,oBAAoB;AAC9D;;AAEA;AACA;AACA;AACA,KAAK;;AAEL,wB;AACA;AACA,iC;AACA;AACA,KAAK;;;AAGL;;AAEA,YAAY,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,O;AACA;AACA;AACA;AACA;AACA,oCAAoC,+CAAM;AAC1C;AACA;AACA,KAAK;AACL;AACA,oCAAoC,+CAAM;AAC1C;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,6CAAI,SAAS,6CAAI;AAC9C;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;AAGe,uEAAQ,E;;;;;;;;;;;;AC9SvB;AAAA;AAAA;AAA0B;AACS;;AAEnC;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,6CAAI;AACvB,oBAAoB,6CAAI;AACxB;;AAEA;AACA;;AAEA,oBAAoB,kDAAQ;AAC5B,CAAC;;;;;;;;;;;;;;;;AClBD;AAAA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP;AACA,WAAW;AACX;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;;AAEP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;;AAEP;AACA,WAAW;AACX;AACA,KAAK;AACL;AACA,OAAO,KAAK,8BAA8B;AAC1C,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA,OAAO,KAAK,8BAA8B;AAC1C,YAAY,8BAA8B;AAC1C;AACA;AACA;AACA,OAAO,8BAA8B;AACrC,OAAO,0CAA0C;AACjD,OAAO,0CAA0C;AACjD,OAAO,yCAAyC;;AAEhD;AACA;AACA,WAAW;AACX;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;;AAEP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP,OAAO;AACP;AACA,OAAO;AACP;;;AAGA;AACA,OAAO,mBAAmB;AAC1B,OAAO,+BAA+B;AACtC,OAAO,+BAA+B;AACtC,OAAO,mBAAmB;AAC1B,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,2JAA2J;AAC3J;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,OAAO,mBAAmB;AAC1B,OAAO,kBAAkB;AACzB,OAAO,mBAAmB;AAC1B,OAAO,oBAAoB;;AAE3B,OAAO,mBAAmB;AAC1B,OAAO,mBAAmB;AAC1B,OAAO,kBAAkB;AACzB,OAAO,oBAAoB;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEe,qEAAM,E;;;;;;;;;;;;AC1RrB;AAAA;AAAA;AAA2C;AACjB;;AAE1B,oBAAoB,sDAAY;AAChC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,K;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,iB;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA,2CAA2C,6CAAI;AAC/C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,K;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEe,oEAAK,E;;;;;;;;;;;;ACvJpB;AAAA;AAAA;AAAA;AAA0B;AACA;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C,6CAAI;AAC/C;AACA;AACA;;AAEA;AACA;;AAEA;AACA,uBAAuB,4CAAI;AAC3B;AACA;;;AAGA;AACA;AACA;AACA;;AAEe,2EAAY,E;;;;;;;;;;;;AC1C3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACb;AACO;AACP;AACF;AACF;AACA;;AAE1B;;AAEA,qBAAqB,sDAAY;AACjC;AACA;AACA;AACA;AACA;AACA;;AAEA,yC;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,eAAe,4CAAI;AACnB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,iBAAiB,4CAAI;AACrB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,mDAAS;AAC5B,mBAAmB,mDAAS;AAC5B;AACA;AACA,mBAAmB,+CAAM;AACzB,mBAAmB,+CAAM;AACzB;;AAEA;AACA,yBAAyB,+CAAM;AAC/B;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,8BAA8B,aAAa;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;;AAEA,KAAK;AACL,4BAA4B,mDAAS;AACrC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,0CAA0C,wBAAwB;;;AAGlE;AACA;AACA,SAAS;AACT;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA,4BAA4B,+CAAM;AAClC,4BAA4B,+CAAM;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,4CAAI;AAC3B;AACA;AACA;;AAEA;AACA,kBAAkB,KAAK,8CAAK,mBAAmB;AAC/C,mBAAmB,8CAAK;AACxB,mBAAmB,8CAAK;AACxB,mBAAmB,8CAAK;;AAExB,sBAAsB,8CAAK;AAC3B;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA,qCAAqC,uBAAuB;;AAE5D;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA,oCAAoC,sBAAsB;;AAE1D;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL;;AAEA;AACA,oBAAoB,6CAAI;AACxB,4CAA4C,6CAAI;AAChD,4CAA4C,6CAAI;AAChD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,8BAA8B,6CAAI,yBAAyB,6CAAI;AAC/D,8BAA8B,6CAAI,gDAAgD,6CAAI;AACtF,8BAA8B,6CAAI,kDAAkD,6CAAI;AACxF,8BAA8B,6CAAI,kDAAkD,6CAAI;AACxF,8BAA8B,6CAAI,kDAAkD,6CAAI;;AAExF;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,0C;;AAEA;AACA,0C;;AAEA;AACA;;AAEA;AACA,0C;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGe,qEAAM,E;;;;;;;;;;;;AC/erB;AAAA;AAAA;AAAA;AAAA;AAA2C;AACb;AACA;AACF;;;AAG5B,qBAAqB,sDAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,6DAA6D,+CAAM;AACnE;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK,gDAAgD,+CAAM,sBAAsB,8CAAK;AACtF;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,+CAAM;AAC/B;AACA,mBAAmB,+CAAM;AACzB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,qEAAM,E;;;;;;;;;;;;AC7QrB;AAAA;AAAA;AAAA;AAA8B;AACA;AACJ;;;AAG1B,wBAAwB,+CAAM;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C,6CAAI;AAC/C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA,cAAc,+CAAM;AACpB;AACA,cAAc,+CAAM;;;AAGpB;AACA;AACA,mBAAmB,+CAAM;AACzB;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,KAAK;;AAEL;AACA,mBAAmB,+CAAM;AACzB;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA,KAAK;AACL;AACA,mBAAmB,+CAAM;AACzB;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA,KAAK;AACL;AACA,mBAAmB,+CAAM;AACzB;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGe,wEAAS,E;;;;;;;;;;;;ACrGxB;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;;AAIA,C;;AAEe,2EAAY,E;;;;;;;;;;;AC1B3B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACpCA;AAAA;AAA2C;;AAE3C,mBAAmB,sDAAY;AAC/B;AACA;AACA;AACA;;;AAGA,C;;AAEe,mEAAI,E","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./lib/index.js\");\n","import MovingObject from './moving_object';\nimport Game from './game';\n\nclass Bullet extends MovingObject {\n  constructor(options) {\n    options.radius = Bullet.RADIUS;\n    super(options);\n    this.color = \"#66ff00\";\n    this.type = \"\";\n    \n    this.bounceCount = options.bounceCount || 0;\n    this.trail = [this.pos];\n    this.tailColor = \"#222\";\n    this.midColor = \"#032cfc\";\n    this.headColor = \"#8403fc\";\n  }\n\n  draw(ctx) {\n    if(this.trail.length === 0) return;\n\n    const gradient = ctx.createLinearGradient(\n      this.pos[0], this.pos[1],\n      this.trail[0][0], this.trail[0][1]\n    );\n\n\n    gradient.addColorStop(0, this.headColor);\n    gradient.addColorStop(0.5, this.midColor);\n    gradient.addColorStop(1,  this.tailColor);\n\n    \n    ctx.lineWidth = this.radius;\n    ctx.strokeStyle = gradient;\n    ctx.setLineDash([1, 0]);\n    \n    ctx.beginPath();\n    ctx.moveTo(this.pos[0], this.pos[1]);\n    ctx.lineTo(this.trail[0][0], this.trail[0][1]);\n    ctx.stroke(); \n  }\n\n  bounce(direction) {\n    if(direction === \"horizontal\") {\n      this.vel[1] *= -1;\n    } else if (direction === \"vertical\") {\n      this.vel[0] *= -1;\n    } else {\n      this.vel[0] *= -1;\n      this.vel[1] *= -1;\n    }\n\n    this.bounceCount++;\n    \n    this.remove();\n    if(this.bounceCount > Bullet.LIFESPAN) {\n      return;\n    }\n    \n    const reflection = new Bullet({\n      pos: this.pos,\n      vel: this.vel,\n      game: this.game,\n      bounceCount: this.bounceCount\n    });\n    \n    this.game.add(reflection);\n    // this.vel = [0, 0];\n  }\n\n  move(timeDelta) {\n    const NORMAL_FRAME_TIME_DELTA = 1000 / Game.FPS,\n      velocityScale = timeDelta / NORMAL_FRAME_TIME_DELTA,\n      offsetX = this.vel[0] * velocityScale,\n      offsetY = this.vel[1] * velocityScale;\n\n    const newX = this.pos[0] + offsetX;\n    const newY = this.pos[1] + offsetY;\n\n    const collisionX = this.game.wallCollision([this.pos[0], newY]);\n    const collisionY = this.game.wallCollision([newX, this.pos[1]]);\n    const collisionXY = this.game.wallCollision([newX, newY]);\n\n\n    if(this.game.portalCollision([this.pos[0], newY])) {\n      if(this.game.portalCollision([this.pos[0], newY]).connectedTo) {\n        return this.game.portalCollision([this.pos[0], newY]).teleport(this, [this.pos[0], newY]);\n      }\n      else {\n        return this.bounce(\"horizontal\");\n      }\n    }\n\n    else if(this.game.portalCollision([newX, this.pos[1]])) {\n      if(this.game.portalCollision([newX, this.pos[1]]).connectedTo) {\n        return this.game.portalCollision([newX, this.pos[1]]).teleport(this, [newX, this.pos[1]]);\n      }\n      else {\n        return this.bounce(\"vertical\");\n      }\n    }\n\n    if(collisionX) {\n      this.bounce(\"horizontal\");\n    } else if (collisionY) {\n      this.bounce(\"vertical\");\n    } else if (collisionXY) {\n      this.bounce(\"both\");\n    }\n\n    this.pos = [this.pos[0] + (this.vel[0] * velocityScale), \n      this.pos[1] + (this.vel[1] * velocityScale)];\n    this.trail.push(this.pos);\n\n    if(this.trail.length > Bullet.MAX) {\n      this.trail.shift();\n    }\n  }\n}\n\nBullet.RADIUS = 3;\nBullet.SPEED = 10;\nBullet.LIFESPAN = 2;\nBullet.MAX = 15;\n\nexport default Bullet;","import Enemy from './enemy';\nimport MovingObject from '../moving_object';\nimport Game from '../game';\nimport Util from '../util';\n\n\nclass Chaser extends MovingObject {\n  constructor(options) {\n    options.radius = 10;\n    super(options);\n\n    this.color = \"#ff0000\";\n    this.hive = options.hive;\n    this.trail = [this.pos];\n    this.maxLength = Chaser.MAX;\n    this.lifespan = options.lifespan || 0;\n  }\n\n  draw(ctx) {\n    if(this.trail.length === 0) return;\n\n    const gradient = ctx.createLinearGradient(\n      this.pos[0], this.pos[1],\n      this.trail[0][0], this.trail[0][1]\n    );\n\n    if(this.lifespan > Chaser.HALF_LIFE) {\n      gradient.addColorStop(0, \"#ff0000\");\n    } \n    else if(this.lifespan > Chaser.HALF_LIFE * (3/2)) {\n      gradient.addColorStop(0, \"#ff0000\");\n    }\n    else {\n      gradient.addColorStop(0, \"#ff0000\");\n    }\n\n    gradient.addColorStop(1,  \"#222\");\n\n    \n    ctx.lineWidth = 2;\n    ctx.strokeStyle = gradient;\n    // ctx.strokeStyle = this.color;\n    ctx.setLineDash([1, 0]);\n    \n    ctx.beginPath();\n    ctx.moveTo(this.pos[0], this.pos[1]);\n    ctx.lineTo(this.trail[0][0], this.trail[0][1]);\n    ctx.stroke(); \n  }\n\n  bounce(direction) {\n    if(direction === \"horizontal\") {\n      this.vel[1] *= -1;\n    } else if (direction === \"vertical\") {\n      this.vel[0] *= -1;\n    } else {\n      this.vel[0] *= -1;\n      this.vel[1] *= -1;\n    }\n    \n    const reflection = new Chaser({\n      pos: this.pos,\n      vel: this.vel,\n      game: this.game,\n      hive: this.hive,\n      lifespan: this.lifespan\n    });\n\n    this.game.add(reflection);\n    this.vel = [0, 0];\n  }\n\n  move(timeDelta) {\n    const NORMAL_FRAME_TIME_DELTA = 1000 / Game.FPS,\n      velocityScale = timeDelta / NORMAL_FRAME_TIME_DELTA,\n      offsetX = this.vel[0] * velocityScale,\n      offsetY = this.vel[1] * velocityScale;\n\n    const newX = this.pos[0] + offsetX;\n    const newY = this.pos[1] + offsetY;\n\n    const collisionX = this.game.wallCollision([this.pos[0], newY]);\n    const collisionY = this.game.wallCollision([newX, this.pos[1]]);\n    const collisionXY = this.game.wallCollision([newX, newY]);\n\n\n    if(collisionX) {\n      this.bounce(\"horizontal\");\n    } else if (collisionY) {\n      this.bounce(\"vertical\");\n    } else if (collisionXY) {\n      this.bounce(\"both\");\n    }\n\n    this.lifespan++;\n\n    if(this.lifespan > Chaser.LIFESPAN) {\n      this.remove();\n    }\n\n    this.pos = [this.pos[0] + (this.vel[0] * velocityScale), \n    this.pos[1] + (this.vel[1] * velocityScale)];\n    \n    this.trail.push(this.pos);\n\n    if(this.trail.length > Chaser.MAX) {\n      this.trail.shift();\n    }\n\n    if(this.lifespan > Chaser.HALF_LIFE) {\n      this.trail.shift();\n      this.trail.shift();\n    }  \n\n  }\n\n  isCollidedWith(otherObject) {\n    const centerDist = Util.dist(this.pos, otherObject.pos);\n    let centerDist2;\n\n    if (this.trail[this.trail.length/2]) {\n      centerDist2 = Util.dist(this.trail[0], otherObject.pos);\n      const centerDist3 = Util.dist(this.trail[this.trail.length/2], otherObject.pos);\n      return centerDist < (this.radius + otherObject.radius) ||\n      centerDist2 < (this.radius + otherObject.radius) ||\n      centerDist3 < (this.radius + otherObject.radius);\n    };\n\n    if (this.trail[0]) {\n      centerDist2 = Util.dist(this.trail[0], otherObject.pos);\n      return centerDist < (this.radius + otherObject.radius) ||\n      centerDist2 < (this.radius + otherObject.radius);\n    };\n\n\n    return centerDist < (this.radius + otherObject.radius);\n  };\n\n}\n\nChaser.LIFESPAN = 100;\nChaser.HALF_LIFE = Chaser.LIFESPAN/2;\nChaser.MAX = 40;\n\nexport default Chaser;","import MovingObject from \"../moving_object\";\nimport Util from \"../util\";\nimport Chaser from \"./chaser\";\n\nclass ChaserHive extends MovingObject {\n  constructor(options) {\n    super(options);\n      if(options.aggro) {\n        this.activate();\n      }\n    this.color = options.color || \"#000000\";\n    this.aggro = options.aggro || false;\n    this.player = options.player;\n    this.health = options.health || 20;\n\n    this.minions = [];\n\n    this.alive = null;\n  }\n\n  releaseChasers() {\n    let vect = Util.dir([this.game.players[0].pos[0] - this.pos[0], \n      this.game.players[0].pos[1]- this.pos[1]]);\n    let angle = Math.atan2(vect[1],vect[0])*180/Math.PI;\n    \n    let directions = ChaserHive.DIRECTIONS.slice();\n\n    if(this.health <= 5) {\n      if(angle > -45 && angle < 45) { \n        directions = directions.slice(0,5);\n      }\n      else if(angle > 45 && angle < 135) {\n        directions = directions.slice(5,10);\n      }\n      else if(angle > 135 || angle < -135) {\n        directions = directions.slice(10,15);\n      }\n      else if(angle < -45 && angle > -135) {\n        directions = directions.slice(15,20);\n      }\n    }  \n    else if(this.health <= 10) {\n      if(angle > -45 && angle < 45) { \n        directions.splice(10,5);\n\n        if(angle < 0) \n          directions.splice(5,5);\n        else\n          directions.splice(15,5);\n      }\n      else if(angle > 45 && angle < 135) {\n        directions.splice(15,5);\n\n        if(angle < 90) \n          directions.splice(10,5);\n        else\n          directions.splice(0,5);\n      }\n      else if(angle > 135 || angle < -135) {\n        directions.splice(0,5);\n\n        if(angle > 0) \n          directions.splice(15,5);\n        else \n          directions.splice(0,5);\n      }\n      else if(angle < -45 && angle > -135) {\n        directions.splice(5,5);\n\n        if(angle > -90) \n          directions.splice(5,5);\n        else \n          directions.splice(15,5);\n      }\n    }\n\n    else if(this.health <= 15) {\n      if(angle > -45 && angle < 45) { \n        directions.splice(10,5);\n      }\n      else if(angle > 45 && angle < 135) {\n        directions.splice(15,5);\n      }\n      else if(angle > 135 || angle < -135) { \n        directions.splice(0,5);\n      }\n      else if(angle < -45 && angle > -135) {\n        directions.splice(5,5);\n      }\n    }\n  \n    for(let i = 0; i < this.health; i++) {\n\n      let relVel = directions[i].slice();\n      relVel[0] *= ChaserHive.SPEED;\n      relVel[1] *= ChaserHive.SPEED;\n\n      let chaser = new Chaser({\n        pos: this.pos,\n        vel: relVel,\n        hive: this,\n        game: this.game\n      });\n\n      this.game.add(chaser);\n      this.minions.push(chaser);\n    }\n  }\n\n  activate() {\n    if(!this.aggro) {\n      this.aggro = true;\n      this.alive = setInterval(() => { this.releaseChasers() }, 1500);\n    }\n  }\n\n  remove() {\n    for(let i = 0; i < this.minions.length; i++) {\n      this.game.remove(this.minions[i]);\n    }\n\n    clearInterval(this.alive);\n    this.game.remove(this);\n  }\n\n  path() {\n    const x = this.game.players[0].pos[0] - this.pos[0];\n    const y = this.game.players[0].pos[1] - this.pos[1];\n    // const dist = Util.dist(this.game.players[0].pos, this.pos);\n    return Util.dir([x, y]);\n  }\n\n\n  move() {\n    // let vect = Util.dir([this.game.players[0].pos[0] - this.pos[0], \n    //   this.game.players[0].pos[0]- this.pos[1]]);\n    //   console.log(Math.atan2(vect[1],vect[0])*180/Math.PI)\n    if(this.aggro) {\n      const dir = this.path();\n      const newX = this.pos[0] + (dir[0] * 1);\n      const newY = this.pos[1] + (dir[1] * 1);\n  \n      const collisionX = this.game.wallCollision([this.pos[0], newY]);\n      const collisionY = this.game.wallCollision([newX, this.pos[1]]);\n  \n      const copy = this.pos;\n\n\n      if(collisionX && collisionY) {\n        return;\n      } else if(collisionX) {\n        return this.pos = [newX, copy[1]];\n      } else if(collisionY) {\n        return this.pos = [copy[0], newY];\n      } \n\n      this.pos = [newX, newY];\n    }\n  }\n\n\n}\n\nconst cos15 = Math.cos((15/180) * Math.PI);\nconst sin15 = Math.sin((15/180) * Math.PI);\n\nconst cos30 = Math.sqrt(3)/2;\nconst sin30 = 1/2;\n\nChaserHive.SPEED = 5;\n\n// ChaserHive.DIRECTIONS = [\n//   [1, 0],\n//   [-1, 0],\n//   [0, 1],\n//   [0, -1],\n\n//   [sin30, cos30],\n//   [sin30, -cos30],\n//   [-sin30, cos30],\n//   [-sin30, -cos30],\n\n//   [cos30, sin30],\n//   [-cos30, sin30],\n//   [cos30, -sin30],\n//   [-cos30, -sin30],\n\n//   [cos15, sin15],\n//   [-cos15, sin15],\n//   [cos15, -sin15],\n//   [-cos15, -sin15],\n\n//   [sin15, cos15],\n//   [-sin15, cos15],\n//   [sin15, -cos15],\n//   [-sin15, -cos15],\n// ]\n\n// ChaserHive.DIRECTIONS = [\n//   [1, 0],\n//   [cos15, sin15],\n//   [cos30, sin30],\n//   [sin30, cos30],\n//   [sin15, cos15],\n  \n//   [0, 1],\n//   [-cos30, sin30],\n//   [-cos15, sin15],\n//   [-sin30, cos30],\n//   [-sin15, cos15],\n\n//   [-1, 0],\n//   [-sin30, -cos30],\n//   [-cos30, -sin30],\n//   [-cos15, -sin15],\n//   [-sin15, -cos15],\n\n\n//   [0, -1],\n//   [sin30, -cos30],\n//   [cos30, -sin30],\n//   [cos15, -sin15],\n//   [sin15, -cos15],\n// ]\n\n// right, up, left, down\nChaserHive.DIRECTIONS = [\n  [cos15, sin15],\n  [cos30, sin30],\n  [1, 0],\n  [cos15, -sin15],\n  [cos30, -sin30],\n  \n\n  [sin15, cos15],\n  [sin30, cos30],\n  [0, 1],\n  [-sin15, cos15],\n  [-sin30, cos30],\n  \n  \n  [-cos30, sin30],\n  [-cos15, sin15],\n  [-1, 0],\n  [-cos30, -sin30],\n  [-cos15, -sin15],\n  \n  \n  [-sin30, -cos30],\n  [-sin15, -cos15],\n  [0, -1],\n  [sin30, -cos30],\n  [sin15, -cos15],\n]\n\n\nexport default ChaserHive;","import MovingObject from \"../moving_object\";\n\nclass Enemy extends MovingObject {\n  constructor(options) {\n    options.radius = 3;\n    super(options);\n    this.color = \"#ffffff\";\n    this.aggro = options.aggro || false;\n  }\n}\n\nexport default Enemy;\n\n","import Player from './player';\nimport Bullet from './bullet';\nimport Wall from './wall';\nimport Portal from './portal';\nimport PortalGun from './portal_gun';\nimport Light from './light';\nimport ChaserHive from './enemies/chaser_hive';\nimport GameView from './game_view';\nimport Chaser from './enemies/chaser';\nimport Levels from './levels';\n\nclass Game {\n  constructor(level, nextLevel, gameOver, winGame, gameCrash) {\n    this.players = [];\n    this.bullets = [];\n    this.lights = [];\n    this.walls = [];\n    this.portals = [];\n    this.enemies = [];\n    this.goal = [];\n    this.level = Levels[level];\n    this.currentLevel = level;\n\n    this.nextLevel = nextLevel;\n    this.gameOver = gameOver;\n    this.winGame = winGame;\n    this.gameCrash = gameCrash;\n\n    this.startLevel();\n  }\n  \n\n  add(object) {\n    if(object instanceof Player) {\n      this.players.push(object);\n    } else if (object instanceof Bullet) {\n      this.bullets.push(object);\n    } else if (object instanceof Wall) {\n      this.walls.push(object);\n    } else if (object instanceof Portal) {\n      this.portals.push(object);\n    } else if (object instanceof Light) {\n      this.lights.push(object);\n    } else if (object instanceof ChaserHive ||\n      object instanceof Chaser) {\n      this.enemies.push(object);\n    }\n  }\n\n  remove(object) {\n    if (object instanceof Bullet) {\n      this.bullets.splice(this.bullets.indexOf(object), 1);\n    } else if (object instanceof Portal) {\n      this.portals.splice(this.portals.indexOf(object), 1);\n    } else if (object instanceof Light) {\n      this.lights.splice(this.lights.indexOf(object), 1);\n    } else if (object instanceof ChaserHive ||\n      object instanceof Chaser) {\n      this.enemies.splice(this.enemies.indexOf(object), 1);\n    } \n    \n    else {\n      throw new Error(\"unknown type of object\");\n    }\n  }\n\n  addPlayer() {\n    const player = new Player({\n      game: this,\n      pos: this.level.start,\n    });\n\n    this.add(player);\n    return player;\n  }\n\n  startLevel() {\n    if(this.level) {\n      let walls = this.level.walls;\n      for(let i = 0; i < walls.length; i++) {\n        let settings = walls[i];\n        settings.game = this;\n        let wall = new Wall(settings);\n        this.add(wall);\n      }\n\n      let goal = this.level.goal;\n      goal.game = this;\n      let goalObj = new Wall(goal);\n      this.goal.push(goalObj);\n\n      let enemies = this.level.enemies;\n      if(this.level.enemies) {\n        for(let j = 0; j < enemies.length; j++) {\n          let hive = new ChaserHive({\n            pos: enemies[j].pos,\n            aggro: enemies[j].aggro,\n            health: enemies[j].health,\n            game: this,\n          });\n          this.add(hive);\n        }\n      }\n\n      let portals = this.level.portals;\n      if(this.level.portals) {\n        for(let k = 0; k < portals.length; k++) {\n          let portal1 = new Portal({\n            pos: portals[k][0].pos,\n            dir: portals[k][0].dir,\n            game: this,\n          });\n          let portal2 = new Portal({\n            pos: portals[k][1].pos,\n            dir: portals[k][1].dir,\n            game: this,\n          });\n\n          portal1.connect(portal2);\n          portal2.connect(portal1);\n          \n          this.add(portal1);\n          this.add(portal2);\n        }\n      }\n  \n    }\n  }\n\n  allMovingObjects() {\n    return [].concat(this.players, this.bullets, this.lights, this.enemies);\n  }\n\n  allObjects() {\n    return [].concat(this.bullets, this.walls, this.portals, this.lights, this.enemies);\n  }\n\n  draw(ctx, xView, yView) {  \n    ctx.save();\n\n    if(this.players[0].portals.length === 2\n      && !this.players[0].portals[0].connectedTo\n      && !this.players[0].portals[1].connectedTo) {\n      this.players[0].connectPortals();\n    } else if(this.players[0].portals.length > 2) {\n      this.players[0].removePortals();\n    }\n\n    \n    \n    // this.wallCollision(this.players[0].pos);\n    ctx.clearRect(0, 0, Game.DIM_X, Game.DIM_Y);\n    \n    \n    ctx.fillRect(0, 0, xView, yView);\n    \n    ctx.translate((xView/2 - this.players[0].pos[0]), (yView/2 - this.players[0].pos[1]))\n    // ctx.clearRect(0, 0, xView, yView);\n    \n    ctx.fillStyle = Game.BG_COLOR;\n    \n\n    // ctx.fillRect(0, 0, Game.DIM_X, Game.DIM_Y);\n    \n    // ctx.translate(-this.players[0].pos[0],-this.players[0].pos[1])\n    // ctx.restore();\n    \n    \n    \n    this.allObjects().forEach(object => {\n      object.draw(ctx);\n    });\n    \n    \n    let progress = this.allMovingObjects().length;\n    if(progress > 300) {      \n      ctx.fillStyle = \"#ffffff\";\n      if(progress > 500) {\n        ctx.fillStyle = \"#ff0000\";\n      }\n      ctx.fillText(`Corruption Progress: ${Math.floor(progress/1000*100)}%`, this.players[0].pos[0] - 50, this.players[0].pos[1] - 60);\n      ctx.fillRect(this.players[0].pos[0] - 100, this.players[0].pos[1] - 50, progress/1000*200,10);\n    }\n\n    if(this.currentLevel === 5) {\n      ctx.fillStyle = \"#ffffff\";\n\n      if(progress > 20 && progress < 100) {\n        ctx.fillText(`ITS POINTLESS. THERE ARE NO EXITS TO THIS ROOM`, this.players[0].pos[0] - 100, this.players[0].pos[1] - 200);\n      }\n      else if(progress > 100 && progress < 150) {\n        ctx.fillText(`ERASE YOUR CONDITIONING`, this.players[0].pos[0] - 100, this.players[0].pos[1] - 200);\n      }\n      else if(progress > 150 && progress < 180) {\n        ctx.fillText(`BREAK FREE OF YOUR PROGRAMMING`, this.players[0].pos[0] - 100, this.players[0].pos[1] - 200);\n      }\n      else if(progress > 230 && progress < 240) {\n        ctx.fillStyle = \"#ff0000\";\n        ctx.fillText(`STACK OVERFLOW?`, this.players[0].pos[0] - 100, this.players[0].pos[1] - 200);\n      }\n      else if(progress > 270 && progress < 300) {\n        ctx.fillStyle = \"#ff0000\";\n        ctx.fillText(`WARNING SENSORY OVERLOAD IMMINENT`, this.players[0].pos[0] - 100, this.players[0].pos[1] - 200);\n      }\n      else if(progress > 300 && progress < 330) {\n        ctx.fillStyle = \"#ff0000\";\n        ctx.fillText(`WaŞäŷĖĸĠŭØőŞĢŹùŽêŏħ¼ś`, this.players[0].pos[0] - 100, this.players[0].pos[1] - 200);\n      }\n      else if (progress > 400 && progress < 450) {\n        ctx.fillText(`[object Object]`, this.players[0].pos[0] - 100, this.players[0].pos[1] - 200);\n\n      }\n\n    }\n\n    this.players[0].renderMouse(ctx);\n    \n    this.players[0].draw(ctx);\n\n    if(this.players[0].shielding) {\n      this.players[0].drawShield(ctx);\n    }\n\n    ctx.restore();\n\n  }\n\n  moveObjects(delta) {\n    let objs = this.allMovingObjects();\n    if(objs.length > 1000 && this.currentLevel === 5) {\n      this.winGame();\n    } else if (objs.length > 800 && this.currentLevel !== 5) {\n      this.gameCrash();\n    }\n\n    objs.forEach(object => {\n      if(!(object instanceof Player))\n        object.move(delta);\n    });\n\n  }\n\n  step(delta) {\n    if(!this.players[0].timeStop) {\n      this.moveObjects(delta);\n    }\n    this.checkCollissions();\n  }\n\n  checkBounds(pos) {\n    return (pos[0] < 0) || (pos[1] < 0) ||\n    (pos[0] > Game.DIM_X) || (pos[1] > Game.DIM_Y);\n  }\n\n\n  wallCollissionCircle(player) {\n    for(let i = 0; i < this.walls.length; i++) {\n      let wall = this.walls[i];\n\n      let midpointX = (wall.topLeft[0] + wall.bottomRight[0])/2;\n      let midpointY = (wall.topLeft[1] + wall.bottomRight[1])/2;\n\n      let width =  wall.bottomRight[0] - wall.topLeft[0];\n      let height = wall.bottomRight[1] - wall.topLeft[1];\n      \n      let circleDistX = Math.abs(player.pos[0] - midpointX);\n      let circleDistY = Math.abs(player.pos[1] - midpointY);\n\n      // if (circleDistX > (width/2 + player.radius)) { return false; }\n      // if (circleDistY > (height/2 + player.radius)) { return false; }\n\n      if (circleDistX <= (width/2)) { console.log(\"hit\");return true; } \n      if (circleDistY <= (height/2)) { console.log(\"hit\");return true; }\n\n    }\n    return false;\n  }\n\n  wallCollision(pos) {\n    for(let i = 0; i < this.walls.length; i++) {\n      let wall = this.walls[i];\n      if( !((pos[0] < wall.topLeft[0]) \n        || (pos[0] > wall.bottomRight[0])\n        || (pos[1] < wall.topLeft[1])\n        || (pos[1] > wall.bottomRight[1]))) {\n          return true;\n      } \n    }\n    return false;\n  }\n\n  finishLevel(pos) {\n    for(let i = 0; i < this.goal.length; i++) {\n      let goal = this.goal[i];\n      if( !((pos[0] < goal.topLeft[0]) \n        || (pos[0] > goal.bottomRight[0])\n        || (pos[1] < goal.topLeft[1])\n        || (pos[1] > goal.bottomRight[1]))) {\n          return true;\n      } \n    }\n    return false;\n  }\n\n  portalCollision(pos) {\n    for(let i = 0; i < this.portals.length; i++) {\n      let portal = this.portals[i];\n      if( !((pos[0] < portal.topLeft[0]) \n        || (pos[0] > portal.bottomRight[0])\n        || (pos[1] < portal.topLeft[1])\n        || (pos[1] > portal.bottomRight[1]))) {\n          return portal;\n      } \n    }\n    return false;\n  }\n\n  checkCollissions() {\n    const allObjects = this.allMovingObjects();\n    for(let i = 0; i < allObjects.length; i++) {\n      for(let j = 0; j < allObjects.length; j++) {\n        if(i === j) continue;\n        const obj1 = allObjects[i];\n        const obj2 = allObjects[j];\n\n        if(obj1 instanceof Player && obj2 instanceof Chaser\n          && !(obj2 instanceof PortalGun)) {\n\n          if(obj1.shielding && obj1.shieldHealth > 0 && obj1.checkShieldHit(obj2)) {\n            obj1.shieldHealth--;\n            if(obj2 instanceof Chaser) {\n              obj2.hive.health--;\n              if(obj2.hive.health <= 0) {\n                obj2.hive.remove();\n              } \n            }\n            this.remove(obj2);\n          } \n          else if (obj1.isCollidedWith(obj2)) {\n            if(obj2 instanceof Chaser) {\n              obj2.hive.health--;\n              if(obj2.hive.health <= 0) {\n                obj2.hive.remove();\n              } \n            }\n            else if(obj2 instanceof Bullet) {\n            }\n\n            obj1.health--;\n            if(obj1.health <= 0) {\n              this.gameOver();\n            }\n            this.remove(obj2);\n          }\n\n        }\n\n        else if (obj1.isCollidedWith(obj2)) {\n          if(obj1 instanceof ChaserHive && (obj2 instanceof Light || obj2 instanceof Bullet)\n          && !(obj2 instanceof PortalGun)) {\n            obj1.activate();\n          }\n          if(obj1 instanceof Chaser && obj2 instanceof Bullet && \n            !(obj2 instanceof PortalGun)) {\n            obj1.hive.health--;\n\n            if(obj1.hive.health <= 0) {\n              obj1.hive.remove();\n            } \n            else {\n              this.remove(obj1);\n            }\n            this.remove(obj2);\n          }   \n        }\n      }\n    }\n  }\n\n}\n\nGame.BG_COLOR = \"#000000\";\nGame.DIM_X = 5000;\nGame.DIM_Y = 5000;\n\n// Game.VIEW_X = 500;\n// Game.VIEW_Y = 500;\n\nGame.VIEW_X = window.innerWidth;\nGame.VIEW_Y = window.innerHeight;\n\n\nGame.FPS = 32;\n\nexport default Game;","import Player from \"./player\";\n// import Camera from \"./camera\";\nimport Game from \"./game\";\nimport Levels from \"./levels\";\n\nconst quotes = [\n  \"\\\"Death is not a hunter unbeknownst to its prey, one is always aware that it lies in wait. Though life is merely a journey to the grave, it must not be undertaken without hope. Only then will a traveler's story live on, treasured by those who bid him farewell. But alas, now my guest's life has ended, his tale left unwritten...\\\"\",\n  \"\\\"Sometimes the only way to win is to not play the game at all.\\\"\",\n  \"\\\"Death is not the opposite of life, but a part of it.\\\"\",\n  \"\\\"It isn't by getting into the world that we become enlightened, but by getting out of the world...by getting so tuned in that we can ride the waves of our existence and never get tossed because we become the waves.\\\"\",\n  \"\\\"Any fool can write code that a computer can understand. Good programmers write code that humans can understand.\\\"\",\n  \"\\\"Truth can only be found in one place: the code.\\\"\",\n  \"\\\"The fact that life has no meaning is a reason to live --moreover, the only one\\\"\",\n  \"\\\"You are afraid to die, and you're afraid to live. What a way to exist.\\\"\",\n  \"\\\"Death is the destination we all share. No one has ever escaped it. And that is as it should be because death is very likely the single best invention of life. It is life's change agent, it clears out the old to make way for the new.\\\"\",\n]\n\nclass GameView {\n  constructor(ctx) {\n    this.ctx = ctx;\n\n    this.level = 1;\n    \n    this.nextLevel = this.nextLevel.bind(this);\n    this.gameOver = this.gameOver.bind(this);\n    this.winGame = this.winGame.bind(this);\n    this.gameCrash = this.gameCrash.bind(this);\n    \n    this.startScreen = true;\n    this.endScreen = false;\n    this.winScreen = false;\n    \n    this.instructions = false;\n    this.splash = true;\n    this.splashEle = document.getElementById('splash');\n\n    this.gameTimer = 0;\n    this.gameInt = null;\n    \n    this.startLevel();\n  }\n\n  nextLevel() {\n    this.level++;\n    if(this.level > 5) {\n      this.splash = true;\n      document.querySelector('.current-level').innerHTML = `You Win`;\n      this.splashEle.style.visibility = \"visible\";\n      return;\n    }\n    \n    this.startLevel();\n    this.splash = true;\n    this.splashEle.style.visibility = \"visible\";\n  }\n\n  startLevel() {\n    document.querySelector('.current-level').innerHTML = `LEVEL ${this.level}: ${Levels[this.level].name}`;\n    if(Levels[this.level].text1) {\n      document.querySelector('.level-text-1').innerHTML = Levels[this.level].text1;\n    }\n    if(Levels[this.level].text2) {\n      document.querySelector('.level-text-2').innerHTML = Levels[this.level].text2;\n    }\n\n    this.game = new Game(this.level, this.nextLevel, this.gameOver, this.winGame, this.gameCrash);\n    this.player = this.game.addPlayer();\n  }\n\n  winGame() {\n    this.level = 1;\n    this.winScreen = true;\n\n    this.game = new Game(this.level, this.nextLevel, this.gameOver, this.gameCrash);\n    this.player = this.game.addPlayer();\n    clearInterval(this.gameInt);\n    this.gameTimer = 0;\n    document.querySelector('.current-level').innerHTML = `STACK OVERFLOW. PROGRAM EXECUTION ENDED. YOU WIN?`;\n    document.querySelector('.level-text-1').innerHTML = \"Embrace the dark space of nothingness. You have finally broken free of the program; the endless game loop of life and death. How does it feel like to stop existing? You can't fully comprehend it, but the silence is better than going back to that dark room...\";\n\n\n    this.splash = true;\n    this.splashEle.style.visibility = \"visible\";\n  }\n\n  gameOver() {\n    clearInterval(this.gameInt);\n    this.gameTimer = 0;\n\n    this.game = new Game(this.level, this.nextLevel, this.gameOver, this.gameCrash);\n    this.player = this.game.addPlayer();\n\n    let idx = Math.floor(Math.random() * quotes.length);\n\n    document.querySelector('.current-level').innerHTML = \"GAME OVER\";\n    document.querySelector('.level-text-1').innerHTML = quotes[idx];\n    document.querySelector('.level-text-2').innerHTML = \"\";\n\n\n    this.endScreen = true;\n    this.splash = true;\n    this.splashEle.style.visibility = \"visible\";\n  }\n\n  gameCrash() {\n    this.game = new Game(this.level, this.nextLevel, this.gameOver, this.gameCrash);\n    this.player = this.game.addPlayer();\n\n    document.querySelector('.current-level').innerHTML = \"WARNING! WARNING! OVERFLOW IMMINENT\";\n    document.querySelector('.level-text-1').innerHTML = \"The overwhelming cries of the monsters have caused your onboard sensors to overload.\";\n    document.querySelector('.level-text-2').innerHTML = \"Triggering too many monsters will result in your freedom through death.\";\n\n\n    this.endScreen = true;\n    this.splash = true;\n    this.splashEle.style.visibility = \"visible\";\n  }\n  \n  // w = 87; d = 68; a = 65; s = 83;\n  bindKeyHandlers() {\n    window.addEventListener(\"keydown\", (e) => {\n      keys[e.keyCode] = true;\n    });\n\n    window.addEventListener(\"keyup\", (e) => {\n      keys[e.keyCode] = false; \n    });\n\n\n    document.addEventListener(\"mousedown\",() => {\n      if(this.player.shieldHealth < 0.01 || !this.player.shielding && \n        !this.player.reloading && !this.splash && !this.player.timeStop) {\n        this.player.fireBullet(\"bullet\");\n      }\n    });\n\n    key(\"e\", () => { \n      if(!this.player.portalCooldown && !this.splash && !this.player.timeStop)\n        this.player.fireBullet(\"portal\"); \n    });\n\n    key(\"p\", () => {\n      if(this.level <= 5) {\n        this.nextLevel();\n      }\n    });\n\n    key(\"o\", () => {\n      this.gameOver();\n    });\n\n    key(\"u\", () => {\n      this.winGame();\n    });\n\n\n    key(\"r\", () => { \n      if(!this.player.timeStopCooldown && !this.splash)\n        this.player.stopTime(); \n    });\n\n    key(\"enter\", () => {\n      if(this.startScreen) {\n        this.startScreen = false;\n        this.instructions = true;\n        document.getElementById(\"start-screen\").style.display = \"none\";\n        document.getElementById(\"instructions\").style.display = \"flex\";\n      } else if(this.instructions){\n        this.instructions = false;\n        document.getElementById(\"instructions\").style.display = \"none\";\n        document.getElementById(\"new-level\").style.display = \"flex\";\n      } \n      else if(this.endScreen) {\n        this.endScreen = false;\n        document.querySelector('.current-level').innerHTML = \"\";\n        document.querySelector('.level-text-1').innerHTML = \"\";\n        document.querySelector('.level-text-2').innerHTML = \"\";\n        this.startLevel();\n      }\n      else if(this.winScreen) {\n        this.startScreen = true;\n        this.winScreen = false;\n        document.getElementById(\"new-level\").style.display = \"none\";\n        document.getElementById(\"start-screen\").style.display = \"flex\";\n        this.startLevel();\n      }\n      else if(this.splash) {\n        document.getElementById(\"game-canvas\").style.visibility = \"visible\";\n        document.querySelector('.current-level').innerHTML = \"\";\n        document.querySelector('.level-text-1').innerHTML = \"\";\n        document.querySelector('.level-text-2').innerHTML = \"\";\n\n        if(this.level === 5) {\n          // clearInterval(this.gameInt);\n          // this.gameTimer = 0;\n          this.gameInt = setInterval(()=>{this.gameTimer += 1}, 1000);\n        }\n\n        this.splashEle.style.visibility = \"hidden\";\n        this.splash = false;\n      }\n    });\n\n    key(\"space\", () => { \n      if(!this.player.lightCooldown && !this.splash && !this.player.timeStop) {\n        this.player.shineLight(); \n      }\n    });\n\n\n  }\n\n  // w = 87; d = 68; a = 65; s = 83; q = 81; e = 69; space = 32\n  keyPressed() {\n    // console.log(keys);\n    this.player.moving = false;\n    if(!this.splash && (this.player.shieldHealth < 0.01 || !this.player.shielding)) {\n      if (keys[87] && keys[65]) {\n        this.player.move(\"wa\");\n        this.player.moving = true;\n      } else if (keys[87] && keys[68]) {\n        this.player.move(\"wd\");\n        this.player.moving = true;\n      } else if (keys[83] && keys[65]) {\n        this.player.move(\"sa\");\n        this.player.moving = true;\n      } else if (keys[83] && keys[68]) {\n        this.player.move(\"sd\");\n        this.player.moving = true;\n      } else if(keys[87]) {\n        this.player.move(\"w\");\n        this.player.moving = true;\n      } else if (keys[65]) {\n        this.player.move(\"a\");\n        this.player.moving = true;\n      } else if (keys[83]) {\n        this.player.move(\"s\");\n        this.player.moving = true;\n      } else if (keys[68]) {\n        this.player.move(\"d\");\n        this.player.moving = true;\n      } \n    }\n    // console.log(keys)\n    if(keys[70]) {\n      this.player.shielding = true;\n      if(this.player.shieldHealth > Player.MIN_SHIELD) {\n        this.player.shieldHealth -= 0.075;\n      }\n    } else {\n      this.player.shielding = false;\n      if(this.player.shieldHealth < Player.MAX_SHIELD) {\n        this.player.shieldHealth += 0.05;\n      }\n    }\n  }\n\n\n  // keyUp(e) {\n  //   if(e.key === \"w\" || e.key === \"s\" ) \n  //     this.player.vel[1] = 0;\n  //   if (e.key === \"a\" || e.key === \"d\")\n  //     this.player.vel[0] = 0;\n  // }\n\n  start() {\n    this.bindKeyHandlers();\n    this.lastTime = 0;\n\n    // start the animation\n    requestAnimationFrame(this.animate.bind(this));\n  }\n\n  animate(time) {\n    const timeDelta = time - this.lastTime;\n    this.keyPressed();\n    this.game.step(timeDelta);\n\n    // this.camera.update();\n\n    if(this.gameTimer > 60 && this.level === 5) {\n      // clearInterval(this.gameInt);\n      // this.gameTimer = 0;\n      this.gameOver();\n    }\n    \n    this.game.draw(this.ctx, Game.VIEW_X, Game.VIEW_Y);\n    this.lastTime = time;\n\n    // every call to animate requests causes another call to animate\n    requestAnimationFrame(this.animate.bind(this));\n  }\n}\n\n// const accel = 3;\n// const sideMove = Math.sqrt(accel+accel)/2;\n\nconst keys = {};\n\nwindow.keys = keys;\n\n\nexport default GameView;","import Game from './game';\nimport GameView from './game_view';\n\nlet gameView;\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const canvasEl = document.getElementById(\"game-canvas\");\n  // canvasEl.width = Game.DIM_X;\n  // canvasEl.height = Game.DIM_Y;\n\n  canvasEl.width = Game.VIEW_X;\n  canvasEl.height = Game.VIEW_Y;\n  const ctx = canvasEl.getContext(\"2d\");\n\n  window.canvas = canvasEl;\n  window.rect = canvasEl.getBoundingClientRect();\n\n  window.game = new GameView(ctx).start();\n});\n\n\n\n","const levels = {\n  1: {\n    walls: [\n      { topLeft: [0, 500],\n        bottomRight: [50, 700],\n      },\n      { topLeft: [0,0],\n        bottomRight: [500, 500],\n      },\n      { topLeft: [0, 700],\n        bottomRight: [1000, 1200],\n      },\n      { topLeft: [600, 0],\n        bottomRight: [1000, 1200],\n      },\n    ],\n    goal: { topLeft: [500, 0],\n      bottomRight: [600, 20],\n    },\n    start: [100, 600],\n    name: \"Into Darkness\",\n    text1: \"\\\"Where am I...\\\"\",\n    text2: \"You wake up shrouded in complete darkness. Somehow you feel like you're forgetting something important. The quiet ringing of an alarm can be heard far away, signaling you to get out. Luckily you have your trusty flashlight with you to illuminate the way...\"\n  },\n\n  2: {\n    walls: [\n      { topLeft: [0, 500],\n        bottomRight: [50, 1000],\n      },\n      { topLeft: [200, 500],\n        bottomRight: [250, 800],\n      },\n      { topLeft: [0, 950],\n        bottomRight: [800, 1000],\n      },\n      { topLeft: [400, 500],\n        bottomRight: [700, 1000],\n      },\n      { topLeft: [250, 700],\n        bottomRight: [325, 750],\n      },\n      { topLeft: [0,0],\n        bottomRight: [700, 500],\n      },\n\n      { topLeft: [0,0],\n        bottomRight: [700, 500],\n      },\n      { topLeft: [700, 550],\n        bottomRight: [1200, 600],\n      },\n      { topLeft: [1100, 300],\n        bottomRight: [1200, 550],\n      },\n      { topLeft: [700, 0],\n        bottomRight: [1200, 50],\n      },\n      { topLeft: [900, 0],\n        bottomRight: [950, 200],\n      },\n      { topLeft: [800, 200],\n        bottomRight: [1050, 250],\n      },\n      { topLeft: [1150, 100],\n        bottomRight: [1200, 400],\n      },\n\n    ],\n    goal: { topLeft: [1180, 0],\n      bottomRight: [1200, 100],\n    },\n    portals: [\n      { 0: { pos: [400, 550], dir: \"left\"},\n        1: { pos: [1000, 550], dir: \"up\"}\n      }\n    ],\n\n    start: [100, 550],\n    name: \"Connected\",\n    text1: \"You see a glowing blue light at the end of the hallway. It becons you towards it, calling out to you as if you were PROGRAMMED to follow the light\",\n    text2: \"Press the E key to fire your portal gun. Pressing E a second time will connect the two portals together\"\n  },\n\n  3: {\n    walls: [\n      { topLeft: [0, 0],\n        bottomRight: [450, 50],\n      },\n      { topLeft: [550, 0],\n        bottomRight: [1000, 50],\n      },\n      { topLeft: [0, 0],\n        bottomRight: [50, 1500],\n      },\n      { topLeft: [0, 500],\n        bottomRight: [50, 1000],\n      },\n      { topLeft: [0, 500],\n        bottomRight: [50, 1000],\n      },\n      { topLeft: [0, 400],\n        bottomRight: [600, 450],\n      },\n      { topLeft: [550, 0],\n        bottomRight: [600, 450],\n      },\n      { topLeft: [0, 700],\n        bottomRight: [1000, 750],\n      },\n      { topLeft: [950, 700],\n        bottomRight: [1000, 1500],\n      },\n      { topLeft: [0, 1450],\n        bottomRight: [1000, 1500],\n      },\n      { topLeft: [950, 0],\n        bottomRight: [1000, 800],\n      },\n      { topLeft: [550, 400],\n        bottomRight: [800, 450],\n      },\n      { topLeft: [700, 200],\n        bottomRight: [1000, 250],\n      },\n    ],\n    portals: [\n      { 0: { pos: [50, 100], dir: \"right\"},\n        1: { pos: [550, 450], dir: \"down\"},\n      }\n    ],\n    enemies: [\n      { pos: [100, 100], aggro: true},\n      { pos: [500, 1000], aggro: true, health: 3},\n      { pos: [800, 1300], aggro: true, health: 3},\n      { pos: [300, 900], aggro: true, health: 3},\n\n    ],\n    start: [100, 500],\n    goal: { topLeft: [450, 0],\n      bottomRight: [550, 30],\n    },\n    name: \"The Encounter\",\n    text1: \"You hear footsteps creeping towards you in the distance. Something is out there with you in the darkness... Your danger PROTOCOL fires off, screaming at you to run to safety. Best find something to protect yourself with.\",\n    text2: \"Click the Left Mouse Button to Shoot. Bullets will bounce off walls and also travel through portals.\"\n  },\n\n  4: {\n    walls: [\n      { topLeft: [0, 0],\n        bottomRight: [450, 350],\n      },\n      { topLeft: [0, 0],\n        bottomRight: [1000, 50],\n      },\n      { topLeft: [550, 0],\n        bottomRight: [1000, 350],\n      },\n      { topLeft: [750, 350],\n        bottomRight: [1000, 450],\n      },\n      { topLeft: [300, 450],\n        bottomRight: [1000, 550],\n      },\n      { topLeft: [0, 450],\n        bottomRight: [50, 550],\n      },\n      { topLeft: [0, 350],\n        bottomRight: [200, 450],\n      },\n      { topLeft: [0, 550],\n        bottomRight: [200, 800],\n      },\n      { topLeft: [0, 700],\n        bottomRight: [500, 800],\n      },\n      { topLeft: [450, 900],\n        bottomRight: [500, 1500],\n      },\n      { topLeft: [450, 1250],\n        bottomRight: [1200, 1300],\n      },\n      { topLeft: [1150, 150],\n        bottomRight: [1200, 1300],\n      },\n      { topLeft: [900, 800],\n        bottomRight: [925, 1150],\n      },\n\n      { topLeft: [700, 650],\n        bottomRight: [1500, 700],\n      },\n      { topLeft: [0, 650],\n        bottomRight: [50, 1500],\n      },\n      { topLeft: [0, 1450],\n        bottomRight: [500, 1500],\n      },\n      { topLeft: [0, 900],\n        bottomRight: [300, 950],\n      },\n      { topLeft: [280, 900],\n        bottomRight: [300, 1200],\n      },\n      { topLeft: [150, 1180],\n        bottomRight: [300, 1200],\n      },\n      { topLeft: [250, 1350],\n        bottomRight: [300, 1500],\n      },\n      { topLeft: [800, 0],\n        bottomRight: [1500, 50],\n      },\n      { topLeft: [1450, 0],\n        bottomRight: [1500, 500],\n      },\n      { topLeft: [1300, 200],\n        bottomRight: [1350, 700],\n      },\n    ],\n\n\n    enemies: [\n      { pos: [ 800, 1100]},\n      { pos: [ 1000, 800], health: 15},\n      { pos: [ 1000, 600], health: 10},\n      { pos: [ 100, 1000]},\n      { pos: [ 1400, 200], health: 15}\n\n    ],\n    start: [500, 200],\n    goal: {\n      topLeft: [1480, 500],\n      bottomRight: [1500, 700],\n    },\n\n    name: \"The darkness has eyes\",\n    text1: \"As you wander around the building, everything begins to feel almost nostalgic. \\\"How many times have I been here?\\\" You begin to feel hopeless; trapped in an endless LOOP.\",\n    text2: \"The monsters seem to be attracted to the light and the sound of gunfire. Best get used to the blackout and stay as quiet as possible...\"\n  },\n\n  5: {\n    walls: [\n      {\n        topLeft: [0, 0],\n        bottomRight: [50, 2000],\n      },\n      {\n        topLeft: [0, 0],\n        bottomRight: [2000, 50],\n      },\n      {\n        topLeft: [1950, 0],\n        bottomRight: [2000, 2000],\n      },\n      {\n        topLeft: [0, 1950],\n        bottomRight: [2000, 2000],\n      },\n    ],\n    start: [1000, 1000],\n    goal:  {\n      topLeft: [3000, 3000],\n      bottomRight: [3000, 3000],\n    },\n    enemies: [\n      { pos: [ 100, 1900]},\n      { pos: [ 100, 100]},\n      { pos: [ 1900, 100]},\n      { pos: [ 1900, 1900]},\n\n      { pos: [ 1200, 100]},\n      { pos: [ 800, 1900]},\n      { pos: [ 100, 800]},\n      { pos: [ 1900, 1200]},\n    ],\n    name: \"No Escape\",\n    text1: \"As you progress onto the next floor, you cease hearing the echoes of your footsteps. Its as if you've stepped into a massive vaccum in empty space. You feel yourself beginning to suffocate. If you stay for more than 60 seconds, you will die.\",\n    text2: \"[object Object]\"\n  }\n};\n\nexport default levels;","import MovingObject from './moving_object';\nimport Game from './game';\n\nclass Light extends MovingObject {\n  constructor(options) {\n    options.radius = 1;\n    super(options);\n    this.color = \"#ffffff\";\n    this.trail = [this.pos];\n\n    this.maxLength = Light.MAX;\n\n    this.lifespan = options.lifespan || Math.floor(Math.random()*40);\n  }\n  \n  draw(ctx) {\n    if(this.trail.length === 0) return;\n\n    const gradient = ctx.createLinearGradient(\n      this.pos[0], this.pos[1],\n      this.trail[0][0], this.trail[0][1]\n    );\n\n    if(this.lifespan > Light.HALF_LIFE) {\n      gradient.addColorStop(0, \"#aaa\");\n    } \n    else if(this.lifespan > Light.HALF_LIFE * (3/2)) {\n      gradient.addColorStop(0, \"#7f7f7f\");\n    }\n    else {\n      gradient.addColorStop(0, \"#fff\");\n    }\n\n    gradient.addColorStop(1,  \"#222\");\n\n    \n    ctx.lineWidth = this.radius;\n    ctx.strokeStyle = gradient;\n    ctx.setLineDash([1, 0]);\n    \n    ctx.beginPath();\n    ctx.moveTo(this.pos[0], this.pos[1]);\n    ctx.lineTo(this.trail[0][0], this.trail[0][1]);\n    ctx.stroke(); \n  }\n\n  bounce(direction) {\n    if(direction === \"horizontal\") {\n      this.vel[1] *= -1;\n    } else if (direction === \"vertical\") {\n      this.vel[0] *= -1;\n    } else {\n      this.vel[0] *= -1;\n      this.vel[1] *= -1;\n    }\n    \n    const reflection = new Light({\n      pos: this.pos,\n      vel: this.vel,\n      game: this.game,\n      lifespan: this.lifespan\n    });\n\n    this.game.add(reflection);\n    this.vel = [0, 0];\n  }\n\n  move(timeDelta) {\n    const NORMAL_FRAME_TIME_DELTA = 1000 / Game.FPS,\n      velocityScale = timeDelta / NORMAL_FRAME_TIME_DELTA,\n      offsetX = this.vel[0] * velocityScale,\n      offsetY = this.vel[1] * velocityScale;\n\n    const newX = this.pos[0] + offsetX;\n    const newY = this.pos[1] + offsetY;\n\n    const collisionX = this.game.wallCollision([this.pos[0], newY]);\n    const collisionY = this.game.wallCollision([newX, this.pos[1]]);\n    const collisionXY = this.game.wallCollision([newX, newY]);\n\n\n    if(collisionX) {\n      this.bounce(\"horizontal\");\n    } else if (collisionY) {\n      this.bounce(\"vertical\");\n    } else if (collisionXY) {\n      this.bounce(\"both\");\n    }\n\n    this.lifespan++;\n\n    if(this.lifespan > Light.LIFESPAN) {\n      this.remove();\n    }\n\n    this.pos = [this.pos[0] + (this.vel[0] * velocityScale), \n    this.pos[1] + (this.vel[1] * velocityScale)];\n    \n    this.trail.push(this.pos);\n\n    if(this.trail.length > Light.MAX) {\n      this.trail.shift();\n    }\n\n    if(this.lifespan > Light.HALF_LIFE) {\n      this.trail.shift();\n      this.trail.shift();\n    }  \n  }\n}\n\nconst cos15 = Math.cos((15/180) * Math.PI);\nconst sin15 = Math.sin((15/180) * Math.PI);\n\nconst cos30 = Math.sqrt(3)/2;\nconst sin30 = 1/2;\n\n\nLight.LIFESPAN = 250;\nLight.HALF_LIFE = Light.LIFESPAN/2;\nLight.SPEED = 5;\nLight.MAX = 40;\n\nLight.DIRECTIONS = [\n  [1, 0],\n  [-1, 0],\n  [0, 1],\n  [0, -1],\n\n  [sin30, cos30],\n  [sin30, -cos30],\n  [-sin30, cos30],\n  [-sin30, -cos30],\n\n  [cos30, sin30],\n  [-cos30, sin30],\n  [cos30, -sin30],\n  [-cos30, -sin30],\n\n  [cos15, sin15],\n  [-cos15, sin15],\n  [cos15, -sin15],\n  [-cos15, -sin15],\n\n  [sin15, cos15],\n  [-sin15, cos15],\n  [sin15, -cos15],\n  [-sin15, -cos15],\n\n]\n\nexport default Light;","import Util from './util';\nimport Game from './game';\n\nclass MovingObject {\n  constructor(options) {\n    this.pos = options.pos || [100,100];\n    this.vel = options.vel || [0,0];\n    this.radius = options.radius || 10;\n    this.game = options.game;\n    this.color = options.color || \"#ffffff\";\n  }\n\n  draw(ctx) {\n    ctx.fillStyle = this.color;\n\n    ctx.beginPath();\n    ctx.arc(\n      this.pos[0], this.pos[1], this.radius, 0, 2 * Math.PI, true\n    );\n    ctx.fill();\n  }\n\n  move(timeDelta) {\n    const NORMAL_FRAME_TIME_DELTA = 1000 / Game.FPS,\n      velocityScale = timeDelta / NORMAL_FRAME_TIME_DELTA,\n      offsetX = this.vel[0] * velocityScale,\n      offsetY = this.vel[1] * velocityScale;\n\n    this.pos = [this.pos[0] + offsetX, this.pos[1] + offsetY];\n  }\n\n  isCollidedWith(otherObject) {\n    const centerDist = Util.dist(this.pos, otherObject.pos);\n    return centerDist < (this.radius + otherObject.radius);\n  };\n\n\n  remove() {\n    this.game.remove(this);\n  };\n}\n\nexport default MovingObject;","import MovingObject from \"./moving_object\";\nimport Bullet from \"./bullet\";\nimport PortalGun from \"./portal_gun\";\nimport Portal from \"./portal\";\nimport Light from \"./light\";\nimport Util from \"./util\";\nimport Game from \"./game\";\n\nconst radius = 25;\n\nclass Player extends MovingObject {\n  constructor(options) {\n    super(options);\n    this.name = options.name || \"player\";\n    this.radius = radius;\n    this.portals = [];\n    this.health = Player.MAX_HEALTH;\n\n    // this.bullets = Player.MAX_BULLETS; \n    this.reloading = false;\n\n    this.portalBullets = 0;\n\n    this.lightCooldown = false;\n    this.lightTimer = 0;\n    this.lightInt = null;\n\n    this.portalCooldown = false;\n    this.portalTimer = 0;\n    this.portalInt = null;\n\n    this.timeStop = false;\n    this.timeStopCooldown = false;\n    this.stopTimer = 0;\n    this.stopInt = null;\n\n    this.shielding = false;\n    this.shieldHealth = Player.MAX_SHIELD;\n    this.cursorPostion = [0,0];\n    \n    this.sprite = new Image();\n    this.sprite.src = \"./sprites/player/cat.png\";\n\n    this.bulletHUD = new Image();\n    this.bulletHUD.src = \"./sprites/player/crosshair.png\";\n    this.lightHUD = new Image();\n    this.lightHUD.src = \"./sprites/player/flashlight.png\";\n    this.timeHUD = new Image();\n    this.timeHUD.src = \"./sprites/player/stopwatch.png\";\n    this.portalHUD = new Image();\n    this.portalHUD.src = \"./sprites/player/portal.png\";\n    this.shieldHUD = new Image();\n    this.shieldHUD.src = \"./sprites/player/shield.png\";\n    \n    this.collision = false;\n    this.updateCursorPostion();\n\n    this.moving = false;\n    this.frame = 0;\n    this.i = 0;\n  }\n\n  move(dir) {\n    const newX = this.pos[0] + Player.MOVES[dir][0] * Player.SPEED;\n    const newY = this.pos[1] + Player.MOVES[dir][1] * Player.SPEED;\n\n    const pi = Math.PI;\n    const radX = Math.cos(45*pi/180)*this.radius;\n    const radY = Math.sin(45*pi/180)*this.radius;\n\n    const topLeft = [newX - radX, newY - radY];\n    const botLeft = [newX - radX, newY + radY];\n    const topRight = [newX + radX, newY - radY];\n    const botRight = [newX + radX, newY + radY];\n\n    if(this.game.portalCollision(topLeft) && this.game.portalCollision(topLeft).active)\n      return this.game.portalCollision(topLeft).teleport(this, topLeft);\n    else if(this.game.portalCollision(botLeft) && this.game.portalCollision(botLeft).active)\n      return this.game.portalCollision(botLeft).teleport(this, botLeft);\n    else if(this.game.portalCollision(topRight) && this.game.portalCollision(topRight).active)\n      return this.game.portalCollision(topRight).teleport(this, topRight);\n    else if(this.game.portalCollision(botRight) && this.game.portalCollision(botRight).active)\n      return this.game.portalCollision(botRight).teleport(this, botRight);\n\n    \n    if(this.game.finishLevel(topLeft)\n      || this.game.finishLevel(botLeft)\n      || this.game.finishLevel(topRight)\n      || this.game.finishLevel(botRight)) {\n        this.game.nextLevel();\n    }\n  \n    if(this.game.wallCollision(topLeft)\n      || this.game.wallCollision(botLeft)\n      || this.game.wallCollision(topRight)\n      || this.game.wallCollision(botRight)) {\n        this.collision = true;\n      return;\n    } else {\n      this.collision = false;\n    }\n\n    this.cursorPostion[0] += newX - this.pos[0];\n    this.cursorPostion[1] += newY - this.pos[1];\n\n    this.pos = [newX, newY];\n\n  }\n\n  mouseAngle() {\n    let vect = Util.dir([(this.cursorPostion[0] - this.pos[0]), \n    this.cursorPostion[1] - this.pos[1]]);\n    let x = vect[0];\n    let y = vect[1];\n\n    return Math.atan2(y,x);\n  }\n\n  renderMouse(ctx) {\n    ctx.lineWidth = 0.7;\n    ctx.strokeStyle = \"#ff0000\";\n    ctx.setLineDash([5, 3]);\n    ctx.beginPath();\n    ctx.moveTo(this.pos[0], this.pos[1]);\n    ctx.lineTo(this.cursorPostion[0], this.cursorPostion[1]);\n    ctx.stroke();\n  }\n\n\n  fireBullet(type) {\n    let angle = this.mouseAngle();\n    let relVel = Util.dir([(this.cursorPostion[0] - this.pos[0]), \n    this.cursorPostion[1] - this.pos[1]]);\n    let pos = this.pos.slice();\n    \n    const radX = Math.cos(angle)*this.radius*1.2;\n    const radY = Math.sin(angle)*this.radius*1.2;\n    pos[0] += radX;\n    pos[1] += radY;\n    \n    if(type === \"portal\") {\n      relVel[0] *= PortalGun.SPEED;\n      relVel[1] *= PortalGun.SPEED;\n    }\n    else {\n      relVel[0] *= Bullet.SPEED;\n      relVel[1] *= Bullet.SPEED;\n    }\n    \n    if(type === \"bullet\") {\n      const bullet = new Bullet({\n        pos: pos,\n        vel: relVel,\n        game: this.game\n      });\n      \n      this.game.add(bullet);\n      this.reloading = true;\n      setTimeout(() => {\n        this.reloading = false;\n      }, 200);\n      // this.bullets--;\n      // console.log(`Ammo: ${this.bullets}`);\n      \n      // if(this.bullets <= 0) {\n      //   console.log('reloading...');\n      //   this.reloading = true;\n      //   this.bullets = Player.MAX_BULLETS;\n      //   setTimeout(() => {\n      //     this.reloading = false;\n      //   }, 1500);\n      // }\n      \n    } else if (type === \"portal\") {\n      const portalGun = new PortalGun({\n        pos: pos,\n        vel: relVel,\n        game: this.game,\n        player: this\n      });\n      this.game.add(portalGun);\n      this.portalBullets++;\n      \n      if(this.portalBullets === 2) {\n        this.portalCooldown = true;\n        this.portalBullets = 0;\n        this.portalTimer = Player.PORTAL_CD;\n        this.portalInt = setInterval(()=>{this.portalTimer -= 0.1}, 100);\n\n\n        setTimeout(() => {\n          this.portalCooldown = false;\n        }, Player.PORTAL_CD*1000);\n      }\n      \n    }\n    \n  }\n\n  connectPortals() {\n    this.portals[0].connect(this.portals[1]);\n    this.portals[1].connect(this.portals[0]);\n    \n    this.portals[0].color = Portal.BLUE;\n    this.portals[1].color = Portal.BLUE;\n  }\n  \n  removePortals() {\n    this.portals[0].remove();\n    this.portals[1].remove();\n    this.portals.shift();\n    this.portals.shift();\n  }\n\n  drawShield(ctx) {\n    if(this.shieldHealth > 0) {\n      ctx.lineWidth = 2;\n      ctx.strokeStyle = \"#144b9f\";\n      ctx.setLineDash([5, 1]);\n  \n      ctx.beginPath();\n      ctx.arc(\n        this.pos[0], this.pos[1], this.radius + this.shieldHealth * Player.SHIELD_RADIUS, \n        0, 2 * Math.PI, true\n      );\n  \n      ctx.stroke();\n    }\n  }\n\n  checkShieldHit(otherObject) {\n    const centerDist = Util.dist(this.pos, otherObject.pos);\n    return centerDist < (this.radius + this.shieldHealth * Player.SHIELD_RADIUS + \n      otherObject.radius);\n  }\n\n  shineLight() {\n    for(let i = 0; i < Light.DIRECTIONS.length; i++) {\n      let relVel = Light.DIRECTIONS[i].slice();\n      relVel[0] *= Light.SPEED;\n      relVel[1] *= Light.SPEED;\n\n      let light = new Light({\n        pos: this.pos,\n        vel: relVel,\n        game: this.game\n      });\n\n      this.game.add(light);\n    }\n\n    this.lightCooldown = true;\n    this.lightTimer = Player.LIGHT_CD;\n    this.lightInt = setInterval(()=>{this.lightTimer -= 0.1}, 100);\n\n    setTimeout(() => {\n      this.lightCooldown = false;\n    }, Player.LIGHT_CD*1000);\n  }\n\n  stopTime() {\n    this.timeStop = true;\n    this.timeStopCooldown = true;\n    this.stopTimer = Player.TIMESTOP_CD;\n\n    this.stopInt = setInterval(()=>{this.stopTimer -= 0.1}, 100);\n\n    setTimeout(() => {\n      this.timeStop = false;\n    }, 1000);\n\n    setTimeout(() => {\n      this.timeStopCooldown = false;\n    }, Player.TIMESTOP_CD*1000);\n  }\n\n  mouseMove(e) {\n    if(e.clientX <= Game.VIEW_X) {\n      this.cursorPostion[0] = e.clientX + (-Game.VIEW_X/2 + this.pos[0]);\n      this.cursorPostion[1] = e.clientY + (-Game.VIEW_Y/2 + this.pos[1]);\n    }\n  }\n\n  updateCursorPostion() {\n    window.addEventListener('mousemove', e => this.mouseMove(e));\n  }\n\n  drawHUD(ctx) {\n    ctx.fillStyle = \"#686968\";\n    let box1 = [this.pos[0] - Game.VIEW_X/2, this.pos[1] + Game.VIEW_Y/2 - Player.HUD_ICON_SIZE];\n    let box2 = [this.pos[0] - Game.VIEW_X/2 + Player.HUD_ICON_SIZE, this.pos[1] + Game.VIEW_Y/2 - Player.HUD_ICON_SIZE];\n    let box3 = [this.pos[0] - Game.VIEW_X/2 + Player.HUD_ICON_SIZE*2, this.pos[1] + Game.VIEW_Y/2 - Player.HUD_ICON_SIZE];\n    let box4 = [this.pos[0] - Game.VIEW_X/2 + Player.HUD_ICON_SIZE*3, this.pos[1] + Game.VIEW_Y/2 - Player.HUD_ICON_SIZE];\n    let box5 = [this.pos[0] - Game.VIEW_X/2 + Player.HUD_ICON_SIZE*4, this.pos[1] + Game.VIEW_Y/2 - Player.HUD_ICON_SIZE];\n\n    ctx.fillRect(box1[0], box1[1], Player.HUD_ICON_SIZE, Player.HUD_ICON_SIZE);\n    ctx.fillRect(box2[0] + 1, box2[1], Player.HUD_ICON_SIZE, Player.HUD_ICON_SIZE);\n    ctx.fillRect(box3[0] + 2, box3[1], Player.HUD_ICON_SIZE, Player.HUD_ICON_SIZE);\n    ctx.fillRect(box4[0] + 3, box4[1], Player.HUD_ICON_SIZE, Player.HUD_ICON_SIZE);\n    ctx.fillRect(box5[0] + 4, box5[1], Player.HUD_ICON_SIZE, Player.HUD_ICON_SIZE);\n    \n    ctx.drawImage(this.bulletHUD, 0, 0, 500, 500, \n      box1[0] + 20, box1[1] + 20, 60, 60);\n\n    ctx.drawImage(this.lightHUD, 0, 0, 980, 980, \n      box2[0] + 30, box2[1] + 30, 40, 40); \n    \n    ctx.drawImage(this.timeHUD, 0, 0, 512, 512, \n      box3[0] + 25, box3[1] + 25, 50, 50); \n\n    ctx.drawImage(this.portalHUD, 0, 0, 483, 600, \n      box4[0] + 25, box4[1] + 13, 50, 65);\n\n    ctx.drawImage(this.shieldHUD, 0, 0, 512, 512, \n      box5[0] + 27, box5[1] + 25, 50, 50); \n\n    \n    ctx.fillStyle = \"#ffffff\";\n    ctx.font = \"16px Georgia\";\n    ctx.fillText(\"Click\", box1[0] + 63, box1[1] + 15);\n    ctx.fillText(\"Space\", box2[0] + 60, box2[1] + 15);\n    ctx.fillText(\"R\", box3[0] + 87, box3[1] + 15);\n    ctx.fillText(\"E\", box4[0] + 88, box4[1] + 15);\n    ctx.fillText(\"F\", box5[0] + 89, box5[1] + 15);\n\n\n    ctx.font = \"14px Georgia\";\n    ctx.fillText(\"Shoot\", box1[0] + 35, box1[1] + 93);\n    ctx.fillText(\"Light\", box2[0] + 37, box2[1] + 93);\n    ctx.fillText(\"Time Stop\", box3[0] + 24, box3[1] + 93);\n    ctx.fillText(\"Portal Gun\", box4[0] + 24, box4[1] + 93);\n    ctx.fillText(\"Shield\", box5[0] + 35, box5[1] + 93);\n    \n    ctx.fillStyle = \"red\";\n    ctx.fillRect(box1[0], box1[1] - 25, 500*this.health/Player.MAX_HEALTH, 20);\n      \n    ctx.fillStyle = \"#ffffff\";\n    \n    ctx.fillText(\"Health\", box1[0], box1[1] - 10);\n\n    ctx.fillStyle = \"rgba(222, 222, 222, 0.7)\";\n\n\n\n    if(this.lightTimer > 0) {\n      ctx.fillRect(box2[0], box2[1] + this.lightTimer*100/Player.LIGHT_CD, Player.HUD_ICON_SIZE, Player.HUD_ICON_SIZE);\n      // ctx.beginPath();\n      // ctx.moveTo(box2[0] + Player.HUD_ICON_SIZE/2 + 1, box2[1] + Player.HUD_ICON_SIZE/2);\n      // ctx.arc(box2[0] + Player.HUD_ICON_SIZE/2 + 1, box2[1] + Player.HUD_ICON_SIZE/2, Player.HUD_ICON_SIZE/2, 0, (2 * Math.PI * this.lightTimer)/Player.LIGHT_CD);\n      // ctx.closePath();\n      // ctx.fill();\n    } else {\n      if(this.lightInt) {\n        clearInterval(this.lightInt);\n      }\n    }\n\n    if(this.stopTimer > 0) {\n      ctx.fillRect(box3[0] + 2, box3[1] + this.stopTimer*100/Player.TIMESTOP_CD, Player.HUD_ICON_SIZE, Player.HUD_ICON_SIZE);\n      // ctx.beginPath();\n      // ctx.moveTo(box3[0] + Player.HUD_ICON_SIZE/2 + 2, box3[1] + Player.HUD_ICON_SIZE/2);\n      // ctx.arc(box3[0] + Player.HUD_ICON_SIZE/2 + 2, box3[1] + Player.HUD_ICON_SIZE/2, Player.HUD_ICON_SIZE/2, 0, (2 * Math.PI * this.stopTimer)/Player.TIMESTOP_CD);\n      // ctx.closePath();\n      // ctx.fill();\n    } else {\n      if(this.stopInt) {\n        clearInterval(this.stopInt);\n      }\n    }\n\n    if(this.portalTimer > 0 ) {\n      ctx.fillRect(box4[0] + 3, box4[1] + this.portalTimer*100/Player.PORTAL_CD, Player.HUD_ICON_SIZE, Player.HUD_ICON_SIZE);\n\n      // ctx.beginPath();\n      // ctx.moveTo(box4[0] + Player.HUD_ICON_SIZE/2 + 3, box4[1] + Player.HUD_ICON_SIZE/2);\n      // ctx.arc(box4[0] + Player.HUD_ICON_SIZE/2 + 3, box4[1] + Player.HUD_ICON_SIZE/2, Player.HUD_ICON_SIZE/2, 0, (2 * Math.PI * this.portalTimer)/Player.PORTAL_CD);\n      // ctx.closePath();\n      // ctx.fill();\n    } else {\n      if(this.portalInt) {\n        clearInterval(this.portalInt);\n      }\n    }\n\n    if(this.shielding) {\n      ctx.fillRect(box5[0] + 4, box4[1], Player.HUD_ICON_SIZE, Player.HUD_ICON_SIZE);\n    }\n    \n  }\n\n\n  draw(ctx) {\n\n    if (this.frame > 2) {\n      this.frame = 0;\n    }\n\n    ctx.save();\n\n    ctx.translate(this.pos[0], this.pos[1])\n\n    let angle = this.mouseAngle()*180/Math.PI;\n    let sx, sy;\n\n    if(angle > -45 && angle < 45) {\n      sx = this.frame*48;\n      sy = 2*48;\n    }\n    else if(angle > 45 && angle < 135) {\n      sx = this.frame*48;\n      sy = 0;\n    }\n    else if(angle > 135 || angle < -135) {\n      sx = this.frame*48;\n      sy = 48;\n    }\n    else if(angle > -135 && angle < -45) {\n      sx = this.frame*48;\n      sy = 3*48;\n    }\n\n    if(!this.moving || this.collision) {\n      sx = 0;\n    }\n\n    // ctx.rotate(this.mouseAngle());\n\n    // ctx.drawImage(this.sprite, \n    //   0,0, 50, 50,\n    //   (this.pos[0]-20), (this.pos[1]-25),\n    //   50, 50\n    // );\n\n    ctx.drawImage(this.sprite, \n      sx,sy, 48, 48,\n      -16, -23,\n      35, 35\n    );\n\n    ctx.restore();\n\n\n    ctx.lineWidth = 1;\n    // ctx.strokeStyle = \"rgba(255, 0, 0, 0.5)\";\n    ctx.strokeStyle = \"#b503fc\";\n    ctx.setLineDash([1,0]);\n    ctx.beginPath();\n    ctx.arc(\n      this.pos[0], this.pos[1], this.radius, 0, 2 * Math.PI, true\n    );\n\n    ctx.stroke();\n\n    if(this.i % 8 === 0) {\n      this.frame++;\n    }\n\n    this.i++;\n\n    this.drawHUD(ctx);\n\n  }\n}\n\nconst sideMove = Math.sqrt(2)/2;\n\nPlayer.MAX_BULLETS = 12;\nPlayer.MAX_HEALTH = 6;\nPlayer.MIN_SHIELD = 0;\nPlayer.MAX_SHIELD = 10;\nPlayer.SHIELD_RADIUS = 1;\n\nPlayer.WIDTH = 48;\nPlayer.HEIGHT = 48;\n\nPlayer.LIGHT_CD = 1;\nPlayer.PORTAL_CD = 5;\nPlayer.TIMESTOP_CD = 5;\n\nPlayer.HUD_ICON_SIZE = 100;\n\n\nPlayer.SPEED = 5;\nPlayer.MOVES = {\n  w: [0, -1],\n  a: [-1, 0],\n  s: [0, 1],\n  d: [1, 0],\n  wa: [-sideMove, -sideMove],\n  wd: [sideMove, -sideMove],\n  sa: [-sideMove, sideMove],\n  sd: [sideMove, sideMove],  \n}\n\n\nexport default Player;","import StaticObject from './static_object';\nimport Player from './player';\nimport Bullet from './bullet';\nimport Light from './light';\n\n\nclass Portal extends StaticObject {\n  constructor(options) {\n    switch(options.dir) {\n      case \"up\":\n        options.topLeft = [options.pos[0] - Portal.WIDTH, options.pos[1]];\n        options.bottomRight = [options.pos[0] + Portal.WIDTH, options.pos[1] + Portal.HEIGHT];\n        break;\n      case \"down\":\n        options.topLeft = [options.pos[0] - Portal.WIDTH, options.pos[1] - Portal.HEIGHT];\n        options.bottomRight = [options.pos[0] + Portal.WIDTH, options.pos[1]];\n        break;\n      case \"left\":\n        options.topLeft = [options.pos[0], options.pos[1] - Portal.WIDTH];\n        options.bottomRight = [options.pos[0] + Portal.HEIGHT, options.pos[1] + Portal.WIDTH];\n        break;\n      case \"right\":\n        options.topLeft = [options.pos[0] - Portal.HEIGHT, options.pos[1] - Portal.WIDTH];\n        options.bottomRight = [options.pos[0], options.pos[1] + Portal.WIDTH];\n        break;\n    }\n\n    super(options);\n    this.active = true;\n    // this.color = options.color || \"#00FF00\";\n    this.color = options.color || Portal.BLUE;\n\n    this.connectedTo = null;\n\n    this.pos = options.pos;\n    this.dir = options.dir;\n\n    this.sprite = new Image();\n    this.frameCount = 0;\n    this.i = 0;\n  }\n\n  teleport(object, pos) {\n    if(this.connectedTo && this.active && (object instanceof Player)) {\n      this.toggleActive();\n      this.connectedTo.toggleActive();\n\n\n      // let offsetX = (this.pos[0] - pos[0]);\n      // let offsetY = (this.pos[1] - pos[1]);\n      let offsetX = 0;\n      let offsetY = 0;\n  \n      if(this.connectedTo.dir === \"up\") {\n        object.pos[0] = this.connectedTo.pos[0] + offsetX;\n        object.pos[1] = this.connectedTo.pos[1] - Portal.OFFSET + offsetY;\n      }\n      else if(this.connectedTo.dir === \"down\") {\n        object.pos[0] = this.connectedTo.pos[0] + offsetX;\n        object.pos[1] = this.connectedTo.pos[1] + Portal.OFFSET + offsetY;\n      }\n      else if(this.connectedTo.dir === \"left\") {\n        object.pos[0] = this.connectedTo.pos[0] - Portal.OFFSET + offsetX;\n        object.pos[1] = this.connectedTo.pos[1] + offsetY;\n      }\n  \n      else if(this.connectedTo.dir === \"right\") {\n        object.pos[0] = this.connectedTo.pos[0] + Portal.OFFSET + offsetX;\n        object.pos[1] = this.connectedTo.pos[1] + offsetY;\n      }\n    } else if(this.connectedTo && (object instanceof Bullet || object instanceof Light)) {\n      let offsetX = -(this.pos[0] - pos[0]);\n      let offsetY = -(this.pos[1] - pos[1]);\n  \n      if(this.connectedTo.dir === \"up\") {\n        object.pos[0] = this.connectedTo.pos[0] + offsetX;\n        object.pos[1] = this.connectedTo.pos[1] - Portal.OFFSET + offsetY;\n\n        if(this.dir === \"up\") {\n          object.vel[1] = -object.vel[1];\n        } else if(this.dir === \"left\") {\n          let temp = object.vel[0];\n          object.vel[0] = -object.vel[1];\n          object.vel[1] = -temp;\n        } else if(this.dir === \"right\") {\n          let temp = object.vel[0];\n          object.vel[0] = object.vel[1];\n          object.vel[1] = temp;\n        }\n      }\n      else if(this.connectedTo.dir === \"down\") {\n        object.pos[0] = this.connectedTo.pos[0] + offsetX;\n        object.pos[1] = this.connectedTo.pos[1] + Portal.OFFSET + offsetY;\n\n        if(this.dir === \"down\") {\n          object.vel[1] = -object.vel[1];\n        } else if(this.dir === \"left\") {\n          let temp = object.vel[0];\n          object.vel[0] = object.vel[1];\n          object.vel[1] = temp;\n        } else if(this.dir === \"right\") {\n          let temp = object.vel[0];\n          object.vel[0] = -object.vel[1];\n          object.vel[1] = -temp;\n        }\n      }\n      else if(this.connectedTo.dir === \"left\") {\n        object.pos[0] = this.connectedTo.pos[0] - Portal.OFFSET + offsetX;\n        object.pos[1] = this.connectedTo.pos[1] + offsetY;\n\n        if(this.dir === \"left\") {\n          object.vel[0] = -object.vel[0];\n        } else if(this.dir === \"down\") {\n          let temp = object.vel[0];\n          object.vel[0] = object.vel[1];\n          object.vel[1] = temp;\n        } else if(this.dir === \"up\") {\n          let temp = object.vel[0];\n          object.vel[0] = -object.vel[1];\n          object.vel[1] = -temp;\n        }\n      }\n  \n      else if(this.connectedTo.dir === \"right\") {\n        object.pos[0] = this.connectedTo.pos[0] + Portal.OFFSET + offsetX;\n        object.pos[1] = this.connectedTo.pos[1] + offsetY;\n\n        if(this.dir === \"right\") {\n          object.vel[0] = -object.vel[0];\n        } else if(this.dir === \"down\") {\n          let temp = object.vel[0];\n          object.vel[0] = -object.vel[1];\n          object.vel[1] = temp;\n        } else if(this.dir === \"up\") {\n          let temp = object.vel[0];\n          object.vel[0] = object.vel[1];\n          object.vel[1] = -temp;\n        }\n      }\n    }\n    \n    if(object instanceof Bullet) {\n      object.remove();\n      object = new Bullet({\n        pos: object.pos,\n        vel: object.vel,\n        game: object.game,\n        bounceCount: object.bounceCount\n      });\n      this.game.add(object);\n    }\n\n  }\n\n  draw(ctx) {\n    if (this.frameCount > 23) {\n      this.frameCount = 0;\n    }\n\n    this.sprite.src = this.color[this.frameCount];\n \n    if(this.dir === \"up\") {\n      ctx.drawImage(this.sprite, \n        0,0, 846, 841,\n        this.pos[0] - 50, this.pos[1] - 15,\n        100, 40\n      )\n    } else if(this.dir === \"down\") {\n      ctx.drawImage(this.sprite, \n        0,0, 846, 841,\n        this.pos[0] - 50, this.pos[1] - 20,\n        100, 40\n      )\n    } else if(this.dir === \"left\") {\n      ctx.drawImage(this.sprite, \n        0,0, 846, 841,\n        this.pos[0] - 20, this.pos[1] - 50,\n        40, 100\n      )\n    } else if(this.dir === \"right\") {\n      ctx.drawImage(this.sprite, \n        0,0, 846, 841,\n        this.pos[0] - 20, this.pos[1] - 50,\n        40, 100\n      )\n    }\n\n    if(this.i % 8 === 0) {\n      this.frameCount++;\n    }\n\n    this.i++;\n  }\n\n  connect(otherPortal) {\n    this.connectedTo = otherPortal;\n  }\n\n  toggleActive() {\n    let temp = this.connectedTo.color;\n    this.connectedTo.active = false;\n    this.connectedTo.color = Portal.PINK;\n\n    setTimeout(() => {\n      this.connectedTo.active = true;\n      this.connectedTo.color = temp;\n    }, 500);\n  }\n\n}\n\nPortal.OFFSET = 15;\nPortal.WIDTH = 25;\nPortal.HEIGHT = 5;\n\nPortal.BLUE = [\n  \"./sprites/blue/blue0.png\",\n  \"./sprites/blue/blue1.png\",\n  \"./sprites/blue/blue2.png\",\n  \"./sprites/blue/blue3.png\",\n  \"./sprites/blue/blue4.png\",\n  \"./sprites/blue/blue5.png\",\n  \"./sprites/blue/blue6.png\",\n  \"./sprites/blue/blue7.png\",\n  \"./sprites/blue/blue8.png\",\n  \"./sprites/blue/blue9.png\",\n  \"./sprites/blue/blue10.png\",\n  \"./sprites/blue/blue11.png\",\n  \"./sprites/blue/blue12.png\",\n  \"./sprites/blue/blue13.png\",\n  \"./sprites/blue/blue14.png\",\n  \"./sprites/blue/blue15.png\",\n  \"./sprites/blue/blue16.png\",\n  \"./sprites/blue/blue17.png\",\n  \"./sprites/blue/blue18.png\",\n  \"./sprites/blue/blue19.png\",\n  \"./sprites/blue/blue20.png\",\n  \"./sprites/blue/blue21.png\",\n  \"./sprites/blue/blue22.png\",\n  \"./sprites/blue/blue23.png\"\n];\n\nPortal.PINK = [\n  \"./sprites/pink/pink0.png\",\n  \"./sprites/pink/pink1.png\",\n  \"./sprites/pink/pink2.png\",\n  \"./sprites/pink/pink3.png\",\n  \"./sprites/pink/pink4.png\",\n  \"./sprites/pink/pink5.png\",\n  \"./sprites/pink/pink6.png\",\n  \"./sprites/pink/pink7.png\",\n  \"./sprites/pink/pink8.png\",\n  \"./sprites/pink/pink9.png\",\n  \"./sprites/pink/pink10.png\",\n  \"./sprites/pink/pink11.png\",\n  \"./sprites/pink/pink12.png\",\n  \"./sprites/pink/pink13.png\",\n  \"./sprites/pink/pink14.png\",\n  \"./sprites/pink/pink15.png\",\n  \"./sprites/pink/pink16.png\",\n  \"./sprites/pink/pink17.png\",\n  \"./sprites/pink/pink18.png\",\n  \"./sprites/pink/pink19.png\",\n  \"./sprites/pink/pink20.png\",\n  \"./sprites/pink/pink21.png\",\n  \"./sprites/pink/pink22.png\",\n  \"./sprites/pink/pink23.png\"\n];\n\nexport default Portal;","import Bullet from './bullet';\nimport Portal from './portal';\nimport Game from './game';\n\n\nclass PortalGun extends Bullet {\n  constructor(options) {\n    super(options);\n    this.player = options.player;\n\n    this.tailColor = \"#222\";\n    this.midColor = \"#fce703\";\n    this.headColor = \"#fc9003\";\n  }\n\n  move(timeDelta) {\n    const NORMAL_FRAME_TIME_DELTA = 1000 / Game.FPS,\n      velocityScale = timeDelta / NORMAL_FRAME_TIME_DELTA,\n      offsetX = this.vel[0] * velocityScale,\n      offsetY = this.vel[1] * velocityScale;\n\n    const newX = this.pos[0] + offsetX;\n    const newY = this.pos[1] + offsetY;\n\n    const collisionX = this.game.wallCollision([this.pos[0], newY]);\n    const collisionY = this.game.wallCollision([newX, this.pos[1]]);\n\n\n    let portal;\n    let color;\n    if(this.player.portals.length === 0 || this.player.portals.length === 2) \n      color = Portal.PINK;\n    else \n      color = Portal.BLUE;\n\n\n    if(collisionX && offsetY < 0) {\n      this.remove();\n      portal = new Portal({\n        pos: [this.pos[0], newY + 5],\n        color: color,\n        game: this.game,\n        dir: \"down\"\n      });\n      \n      this.player.portals.push(portal);\n      this.game.add(portal);\n    } else if(collisionX && offsetY > 0) {\n\n      this.remove();\n      portal = new Portal({\n        pos: [newX, this.pos[1]],\n        color: color,\n        game: this.game,\n        dir: \"up\"\n      });\n\n      this.player.portals.push(portal);\n      this.game.add(portal);\n\n    } else if (collisionY && offsetX > 0) {\n      this.remove();\n      portal = new Portal({\n        pos: [newX - 5, this.pos[1]],\n        color: color,\n        game: this.game,\n        dir: \"left\"\n      });\n\n      this.player.portals.push(portal);\n      this.game.add(portal);\n\n    } else if (collisionY && offsetX < 0) {\n      this.remove();\n      portal = new Portal({\n        pos: [newX + 5, this.pos[1]],\n        color: color,\n        game: this.game,\n        dir: \"right\"\n      });\n\n      this.player.portals.push(portal);\n      this.game.add(portal);\n    }\n\n    this.pos = [this.pos[0] + (this.vel[0] * velocityScale), \n      this.pos[1] + (this.vel[1] * velocityScale)];\n    this.trail.push(this.pos);\n\n    if(this.trail.length > PortalGun.MAX) {\n      this.trail.shift();\n    }\n  }\n}\n\nPortalGun.RADIUS = 5;\nPortalGun.OFFSET = 5;\nPortalGun.SPEED = 5;\nPortalGun.MAX = 30;\n\n\nexport default PortalGun;","class StaticObject {\n\n  constructor(options) {\n    this.topLeft = options.topLeft;\n    this.bottomRight = options.bottomRight;\n    this.width = this.bottomRight[0] - this.topLeft[0];\n    this.height = this.bottomRight[1] - this.topLeft[1];\n    this.color =  options.color || \"#000000\"; // #ffffff\n    this.game = options.game;\n  }\n\n  draw(ctx) {\n    // ctx.fillStyle = \"rgba(20, 20, 20, 0.5)\";\n    ctx.fillStyle = this.color;\n    ctx.fillRect(this.topLeft[0], this.topLeft[1], this.width, this.height);\n  }\n\n\n  remove() {\n    this.game.remove(this);\n  };\n\n\n\n} \n\nexport default StaticObject;","const Util = {\n  // Normalize the length of the vector to 1, maintaining direction.\n  dir(vec) {\n    const norm = Util.norm(vec);\n    return Util.scale(vec, 1 / norm);\n  },\n  // Find distance between two points.\n  dist(pos1, pos2) {\n    return Math.sqrt(\n      Math.pow(pos1[0] - pos2[0], 2) + Math.pow(pos1[1] - pos2[1], 2)\n    );\n  },\n  // Find the length of the vector.\n  norm(vec) {\n    return Util.dist([0, 0], vec);\n  },\n  // Return a randomly oriented vector with the given length.\n  randomVec(length) {\n    const deg = 2 * Math.PI * Math.random();\n    return Util.scale([Math.sin(deg), Math.cos(deg)], length);\n  },\n  // Scale the length of a vector by the given amount.\n  scale(vec, m) {\n    return [vec[0] * m, vec[1] * m];\n  },\n  wrap(coord, max) {\n    if (coord < 0) {\n      return max - (coord % max);\n    } else if (coord > max) {\n      return coord % max;\n    } else {\n      return coord;\n    }\n  }\n};\n\nmodule.exports = Util;\n","import StaticObject from './static_object';\n\nclass Wall extends StaticObject {\n  constructor(options) {\n    super(options);\n    this.passable = false;\n  }\n\n\n} \n\nexport default Wall;"],"sourceRoot":""}